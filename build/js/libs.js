function embed(t,e,i){if(i){var s=document.createDocumentFragment(),o=!e.hasAttribute("viewBox")&&i.getAttribute("viewBox");o&&e.setAttribute("viewBox",o);for(var n=i.cloneNode(!0);n.childNodes.length;)s.appendChild(n.firstChild);t.appendChild(s)}}function loadreadystatechange(t){t.onreadystatechange=function(){if(4===t.readyState){var e=t._cachedDocument;e||(e=t._cachedDocument=document.implementation.createHTMLDocument(""),e.body.innerHTML=t.responseText,t._cachedTarget={}),t._embeds.splice(0).map(function(i){var s=t._cachedTarget[i.id];s||(s=t._cachedTarget[i.id]=e.getElementById(i.id)),embed(i.parent,i.svg,s)})}},t.onreadystatechange()}function svg4everybody(t){function e(){for(var t=0;t<p.length;){var r=p[t],a=r.parentNode,h=getSVGAncestor(a);if(h){var c=r.getAttribute("xlink:href")||r.getAttribute("href");if(LEGACY_SUPPORT&&i){var f=document.createElement("img");f.style.cssText="display:inline-block;height:100%;width:100%",f.setAttribute("width",h.getAttribute("width")||h.clientWidth),f.setAttribute("height",h.getAttribute("height")||h.clientHeight),f.src=s(c,h,r),a.replaceChild(f,r)}else if(n)if(!o.validate||o.validate(c,h,r)){a.removeChild(r);var m=c.split("#"),g=m.shift(),_=m.join("#");if(g.length){var v=l[g];v||(v=l[g]=new XMLHttpRequest,v.open("GET",g),v.send(),v._embeds=[]),v._embeds.push({parent:a,svg:h,id:_}),loadreadystatechange(v)}else embed(a,h,document.getElementById(_))}else++t,++u}else++t}(!p.length||p.length-u>0)&&d(e,67)}var i,s,o=Object(t);LEGACY_SUPPORT&&(s=o.fallback||function(t){return t.replace(/\?[^#]+/,"").replace("#",".").replace(/^\./,"")+".png"+(/\?[^#]+/.exec(t)||[""])[0]},(i="nosvg"in o?o.nosvg:/\bMSIE [1-8]\b/.test(navigator.userAgent))&&(document.createElement("svg"),document.createElement("use")));var n,r=/\bMSIE [1-8]\.0\b/,a=/\bTrident\/[567]\b|\bMSIE (?:9|10)\.0\b/,h=/\bEdge\/.(\d+)\b/,c=window.top!==window.self;n="polyfill"in o?o.polyfill:LEGACY_SUPPORT?r.test(navigator.userAgent)||a.test(navigator.userAgent)||(navigator.userAgent.match(/\bEdge\/12\.(\d+)\b/)||[])[1]<10547||(navigator.userAgent.match(/\bAppleWebKit\/(\d+)\b/)||[])[1]<537||h.test(navigator.userAgent)&&c:a.test(navigator.userAgent)||(navigator.userAgent.match(/\bEdge\/12\.(\d+)\b/)||[])[1]<10547||(navigator.userAgent.match(/\bAppleWebKit\/(\d+)\b/)||[])[1]<537||h.test(navigator.userAgent)&&c;var l={},d=window.requestAnimationFrame||setTimeout,p=document.getElementsByTagName("use"),u=0;n&&e()}function getSVGAncestor(t){for(var e=t;"svg"!==e.nodeName.toLowerCase()&&(e=e.parentNode););return e}!function(t,e){"function"==typeof define&&define.amd?define([],function(){return t.svg4everybody=e()}):"object"==typeof module&&module.exports?module.exports=e():t.svg4everybody=e()}(this,function(){function t(t,e,i){if(i){var s=document.createDocumentFragment(),o=!e.hasAttribute("viewBox")&&i.getAttribute("viewBox");o&&e.setAttribute("viewBox",o);for(var n=i.cloneNode(!0);n.childNodes.length;)s.appendChild(n.firstChild);t.appendChild(s)}}function e(e){e.onreadystatechange=function(){if(4===e.readyState){var i=e._cachedDocument;i||(i=e._cachedDocument=document.implementation.createHTMLDocument(""),i.body.innerHTML=e.responseText,e._cachedTarget={}),e._embeds.splice(0).map(function(s){var o=e._cachedTarget[s.id];o||(o=e._cachedTarget[s.id]=i.getElementById(s.id)),t(s.parent,s.svg,o)})}},e.onreadystatechange()}function i(i){function o(){for(var i=0;i<m.length;){var c=m[i],l=c.parentNode,d=s(l);if(d){var p=c.getAttribute("xlink:href")||c.getAttribute("href");if(n){var _=document.createElement("img");_.style.cssText="display:inline-block;height:100%;width:100%",_.setAttribute("width",d.getAttribute("width")||d.clientWidth),_.setAttribute("height",d.getAttribute("height")||d.clientHeight),_.src=r(p,d,c),l.replaceChild(_,c)}else if(h)if(!a.validate||a.validate(p,d,c)){l.removeChild(c);var v=p.split("#"),y=v.shift(),b=v.join("#");if(y.length){var w=u[y];w||(w=u[y]=new XMLHttpRequest,w.open("GET",y),w.send(),w._embeds=[]),w._embeds.push({parent:l,svg:d,id:b}),e(w)}else t(l,d,document.getElementById(b))}else++i,++g}else++i}(!m.length||m.length-g>0)&&f(o,67)}var n,r,a=Object(i);r=a.fallback||function(t){return t.replace(/\?[^#]+/,"").replace("#",".").replace(/^\./,"")+".png"+(/\?[^#]+/.exec(t)||[""])[0]},(n="nosvg"in a?a.nosvg:/\bMSIE [1-8]\b/.test(navigator.userAgent))&&(document.createElement("svg"),document.createElement("use"));var h,c=/\bMSIE [1-8]\.0\b/,l=/\bTrident\/[567]\b|\bMSIE (?:9|10)\.0\b/,d=/\bEdge\/.(\d+)\b/,p=window.top!==window.self;h="polyfill"in a?a.polyfill:c.test(navigator.userAgent)||l.test(navigator.userAgent)||(navigator.userAgent.match(/\bEdge\/12\.(\d+)\b/)||[])[1]<10547||(navigator.userAgent.match(/\bAppleWebKit\/(\d+)\b/)||[])[1]<537||d.test(navigator.userAgent)&&p;var u={},f=window.requestAnimationFrame||setTimeout,m=document.getElementsByTagName("use"),g=0;h&&o()}function s(t){for(var e=t;"svg"!==e.nodeName.toLowerCase()&&(e=e.parentNode););return e}return i}),function(t,e,i,s){"use strict";function o(t){var e=t.currentTarget,s=t.data?t.data.options:{},o=t.data?t.data.items:[],n="",r=0;t.preventDefault(),t.stopPropagation(),i(e).attr("data-fancybox")&&(n=i(e).data("fancybox")),n?(o=o.length?o.filter('[data-fancybox="'+n+'"]'):i("[data-fancybox="+n+"]"),r=o.index(e)):o=[e],i.fancybox.open(o,s,r)}if(i){var n={speed:330,loop:!0,opacity:"auto",margin:[44,0],gutter:30,infobar:!0,buttons:!0,slideShow:!0,fullScreen:!0,thumbs:!0,closeBtn:!0,smallBtn:"auto",image:{preload:"auto",protect:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen allowtransparency="true" src=""></iframe>',preload:!0,scrolling:"no",css:{}},baseClass:"",slideClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-controls"><div class="fancybox-infobar"><button data-fancybox-previous class="fancybox-button fancybox-button--left" title="Previous"></button><div class="fancybox-infobar__body"><span class="js-fancybox-index"></span>&nbsp;/&nbsp;<span class="js-fancybox-count"></span></div><button data-fancybox-next class="fancybox-button fancybox-button--right" title="Next"></button></div><div class="fancybox-buttons"><button data-fancybox-close class="fancybox-button fancybox-button--close" title="Close (Esc)"></button></div></div><div class="fancybox-slider-wrap"><div class="fancybox-slider"></div></div><div class="fancybox-caption-wrap"><div class="fancybox-caption"></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>The requested content cannot be loaded. <br /> Please try again later.<p></div>',closeTpl:'<button data-fancybox-close class="fancybox-close-small"></button>',parentEl:"body",touch:!0,keyboard:!0,focus:!0,closeClickOutside:!0,beforeLoad:i.noop,afterLoad:i.noop,beforeMove:i.noop,afterMove:i.noop,onComplete:i.noop,onInit:i.noop,beforeClose:i.noop,afterClose:i.noop,onActivate:i.noop,onDeactivate:i.noop},r=i(t),a=i(e),h=0,c=function(t){return t&&t.hasOwnProperty&&t instanceof i},l=function(){return t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||function(e){t.setTimeout(e,1e3/60)}}(),d=function(s){var o;return"function"==typeof i&&s instanceof i&&(s=s[0]),o=s.getBoundingClientRect(),o.bottom>0&&o.right>0&&o.left<(t.innerWidth||e.documentElement.clientWidth)&&o.top<(t.innerHeight||e.documentElement.clientHeight)},p=function(t,s,o){var r=this;r.opts=i.extend(!0,{index:o},n,s||{}),r.id=r.opts.id||++h,r.group=[],r.currIndex=parseInt(r.opts.index,10)||0,r.prevIndex=null,r.prevPos=null,r.currPos=0,r.firstRun=null,r.createGroup(t),r.group.length&&(r.$lastFocus=i(e.activeElement).blur(),r.slides={},r.init(t))};i.extend(p.prototype,{init:function(){var t,e,s=this,o=!1;s.scrollTop=a.scrollTop(),s.scrollLeft=a.scrollLeft(),i.fancybox.getInstance()||(t=i("body").width(),i("html").addClass("fancybox-enabled"),i.fancybox.isTouch?(i.each(s.group,function(t,e){if("image"!==e.type&&"iframe"!==e.type)return o=!0,!1}),o&&i("body").css({position:"fixed",width:t,top:-1*s.scrollTop})):(t=i("body").width()-t)>1&&i('<style id="fancybox-noscroll" type="text/css">').html(".compensate-for-scrollbar, .fancybox-enabled body { margin-right: "+t+"px; }").appendTo("head")),e=i(s.opts.baseTpl).attr("id","fancybox-container-"+s.id).data("FancyBox",s).addClass(s.opts.baseClass).hide().prependTo(s.opts.parentEl),s.$refs={container:e,bg:e.find(".fancybox-bg"),controls:e.find(".fancybox-controls"),buttons:e.find(".fancybox-buttons"),slider_wrap:e.find(".fancybox-slider-wrap"),slider:e.find(".fancybox-slider"),caption:e.find(".fancybox-caption")},s.trigger("onInit"),s.activate(),s.current||s.jumpTo(s.currIndex)},createGroup:function(t){var e=this,s=i.makeArray(t);i.each(s,function(t,s){var o,n,r,a,h={},c={},l=[];i.isPlainObject(s)?(h=s,c=s.opts||{}):"object"===i.type(s)&&i(s).length?(o=i(s),l=o.data(),c="options"in l?l.options:{},c="object"===i.type(c)?c:{},h.type="type"in l?l.type:c.type,h.src="src"in l?l.src:c.src||o.attr("href"),c.width="width"in l?l.width:c.width,c.height="height"in l?l.height:c.height,c.thumb="thumb"in l?l.thumb:c.thumb,c.selector="selector"in l?l.selector:c.selector,"srcset"in l&&(c.image={srcset:l.srcset}),c.$orig=o):h={type:"html",content:s+""},h.opts=i.extend(!0,{},e.opts,c),n=h.type,r=h.src||"",n||(h.content?n="html":r.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?n="image":r.match(/\.(pdf)((\?|#).*)?$/i)?n="pdf":"#"===r.charAt(0)&&(n="inline"),h.type=n),h.index=e.group.length,h.opts.$orig&&!h.opts.$orig.length&&delete h.opts.$orig,!h.opts.$thumb&&h.opts.$orig&&(h.opts.$thumb=h.opts.$orig.find("img:first")),h.opts.$thumb&&!h.opts.$thumb.length&&delete h.opts.$thumb,"function"===i.type(h.opts.caption)?h.opts.caption=h.opts.caption.apply(s,[e,h]):"caption"in l?h.opts.caption=l.caption:c.$orig&&(h.opts.caption=o.attr("title")),h.opts.caption=void 0===h.opts.caption?"":h.opts.caption+"","ajax"===n&&(a=r.split(/\s+/,2),a.length>1&&(h.src=a.shift(),h.opts.selector=a.shift())),"auto"==h.opts.smallBtn&&(i.inArray(n,["html","inline","ajax"])>-1?(h.opts.buttons=!1,h.opts.smallBtn=!0):h.opts.smallBtn=!1),"pdf"===n&&(h.type="iframe",h.opts.closeBtn=!0,h.opts.smallBtn=!1,h.opts.iframe.preload=!1),h.opts.modal&&i.extend(!0,h.opts,{infobar:0,buttons:0,keyboard:0,slideShow:0,fullScreen:0,closeClickOutside:0}),e.group.push(h)})},addEvents:function(){var e=this;e.removeEvents(),e.$refs.container.on("click.fb-close","[data-fancybox-close]",function(t){t.stopPropagation(),t.preventDefault(),e.close(t)}).on("click.fb-previous","[data-fancybox-previous]",function(t){t.stopPropagation(),t.preventDefault(),e.previous()}).on("click.fb-next","[data-fancybox-next]",function(t){t.stopPropagation(),t.preventDefault(),e.next()}),i(t).on("orientationchange.fb resize.fb",function(t){l(function(){t&&t.originalEvent&&"resize"===t.originalEvent.type?e.update():(e.$refs.slider_wrap.hide(),l(function(){e.$refs.slider_wrap.show(),e.update()}))})}),a.on("focusin.fb",function(t){var s=i.fancybox?i.fancybox.getInstance():null;!s||i(t.target).hasClass("fancybox-container")||i.contains(s.$refs.container[0],t.target)||(t.stopPropagation(),s.focus(),r.scrollTop(e.scrollTop).scrollLeft(e.scrollLeft))}),a.on("keydown.fb",function(t){var s=e.current,o=t.keyCode||t.which;if(s&&s.opts.keyboard&&!i(t.target).is("input")&&!i(t.target).is("textarea")){if(8===o||27===o)return t.preventDefault(),void e.close(t);switch(o){case 37:case 38:t.preventDefault(),e.previous();break;case 39:case 40:t.preventDefault(),e.next();break;case 80:case 32:t.preventDefault(),e.SlideShow&&(t.preventDefault(),e.SlideShow.toggle());break;case 70:e.FullScreen&&(t.preventDefault(),e.FullScreen.toggle());break;case 71:e.Thumbs&&(t.preventDefault(),e.Thumbs.toggle())}}})},removeEvents:function(){r.off("scroll.fb resize.fb orientationchange.fb"),a.off("keydown.fb focusin.fb click.fb-close"),this.$refs.container.off("click.fb-close click.fb-previous click.fb-next")},previous:function(t){this.jumpTo(this.currIndex-1,t)},next:function(t){this.jumpTo(this.currIndex+1,t)},jumpTo:function(t,e){var i,s,o,n,r=this;if(i=r.firstRun=null===r.firstRun,s=o=t=parseInt(t,10),n=!!r.current&&r.current.opts.loop,!r.isAnimating&&(s!=r.currIndex||i)){if(r.group.length>1&&n)s%=r.group.length,s=s<0?r.group.length+s:s,2==r.group.length?o=t-r.currIndex+r.currPos:(o=s-r.currIndex+r.currPos,Math.abs(r.currPos-(o+r.group.length))<Math.abs(r.currPos-o)?o+=r.group.length:Math.abs(r.currPos-(o-r.group.length))<Math.abs(r.currPos-o)&&(o-=r.group.length));else if(!r.group[s])return void r.update(!1,!1,e);r.current&&(r.current.$slide.removeClass("fancybox-slide--current fancybox-slide--complete"),r.updateSlide(r.current,!0)),r.prevIndex=r.currIndex,r.prevPos=r.currPos,r.currIndex=s,r.currPos=o,r.current=r.createSlide(o),r.group.length>1&&((r.opts.loop||o-1>=0)&&r.createSlide(o-1),(r.opts.loop||o+1<r.group.length)&&r.createSlide(o+1)),r.current.isMoved=!1,r.current.isComplete=!1,e=parseInt(void 0===e?1.5*r.current.opts.speed:e,10),r.trigger("beforeMove"),r.updateControls(),i&&(r.current.$slide.addClass("fancybox-slide--current"),r.$refs.container.show(),l(function(){r.$refs.bg.css("transition-duration",r.current.opts.speed+"ms"),r.$refs.container.addClass("fancybox-container--ready")})),r.update(!0,!1,i?0:e,function(){r.afterMove()}),r.loadSlide(r.current),i&&r.current.$ghost||r.preload()}},createSlide:function(t){var e,s,o,n=this;if(s=t%n.group.length,s=s<0?n.group.length+s:s,!n.slides[t]&&n.group[s]){if(n.opts.loop&&n.group.length>2)for(var r in n.slides)if(n.slides[r].index===s)return o=n.slides[r],o.pos=t,n.slides[t]=o,delete n.slides[r],n.updateSlide(o),o;e=i('<div class="fancybox-slide"></div>').appendTo(n.$refs.slider),n.slides[t]=i.extend(!0,{},n.group[s],{pos:t,$slide:e,isMoved:!1,isLoaded:!1})}return n.slides[t]},zoomInOut:function(t,e,s){var o,n,r,a=this,h=a.current,c=h.$placeholder,l=h.opts.opacity,p=h.opts.$thumb,u=p?p.offset():0,f=h.$slide.offset();return!!(c&&h.isMoved&&u&&d(p))&&(!("In"===t&&!a.firstRun)&&(i.fancybox.stop(c),a.isAnimating=!0,o={top:u.top-f.top+parseFloat(p.css("border-top-width")||0),left:u.left-f.left+parseFloat(p.css("border-left-width")||0),width:p.width(),height:p.height(),scaleX:1,scaleY:1},"auto"==l&&(l=Math.abs(h.width/h.height-o.width/o.height)>.1),"In"===t?(n=o,r=a.getFitPos(h),r.scaleX=r.width/n.width,r.scaleY=r.height/n.height,l&&(n.opacity=.1,r.opacity=1)):(n=i.fancybox.getTranslate(c),r=o,h.$ghost&&(h.$ghost.show(),h.$image&&h.$image.remove()),n.scaleX=n.width/r.width,n.scaleY=n.height/r.height,n.width=r.width,n.height=r.height,l&&(r.opacity=0)),a.updateCursor(r.width,r.height),delete r.width,delete r.height,i.fancybox.setTranslate(c,n),c.show(),a.trigger("beforeZoom"+t),c.css("transition","all "+e+"ms"),i.fancybox.setTranslate(c,r),setTimeout(function(){var e;c.css("transition","none"),e=i.fancybox.getTranslate(c),e.scaleX=1,e.scaleY=1,i.fancybox.setTranslate(c,e),a.trigger("afterZoom"+t),s.apply(a),a.isAnimating=!1},e),!0))},canPan:function(){var t=this,e=t.current,i=e.$placeholder,s=!1;return i&&(s=t.getFitPos(e),s=Math.abs(i.width()-s.width)>1||Math.abs(i.height()-s.height)>1),s},isScaledDown:function(){var t=this,e=t.current,s=e.$placeholder,o=!1;return s&&(o=i.fancybox.getTranslate(s),o=o.width<e.width||o.height<e.height),o},scaleToActual:function(t,e,s){var o,n,r,a,h,c=this,l=c.current,d=l.$placeholder,p=parseInt(l.$slide.width(),10),u=parseInt(l.$slide.height(),10),f=l.width,m=l.height;d&&(c.isAnimating=!0,t=void 0===t?.5*p:t,e=void 0===e?.5*u:e,o=i.fancybox.getTranslate(d),a=f/o.width,h=m/o.height,n=.5*p-.5*f,r=.5*u-.5*m,f>p&&(n=o.left*a-(t*a-t),n>0&&(n=0),n<p-f&&(n=p-f)),m>u&&(r=o.top*h-(e*h-e),r>0&&(r=0),r<u-m&&(r=u-m)),c.updateCursor(f,m),i.fancybox.animate(d,null,{top:r,left:n,scaleX:a,scaleY:h},s||l.opts.speed,function(){c.isAnimating=!1}))},scaleToFit:function(t){var e,s=this,o=s.current,n=o.$placeholder;n&&(s.isAnimating=!0,e=s.getFitPos(o),s.updateCursor(e.width,e.height),i.fancybox.animate(n,null,{top:e.top,left:e.left,scaleX:e.width/n.width(),scaleY:e.height/n.height()},t||o.opts.speed,function(){s.isAnimating=!1}))},getFitPos:function(t){var e,s,o,n,a,h,c,l=t.$placeholder||t.$content,d=t.width,p=t.height,u=t.opts.margin;return!(!l||!l.length||!d&&!p)&&("number"===i.type(u)&&(u=[u,u]),2==u.length&&(u=[u[0],u[1],u[0],u[1]]),r.width()<800&&(u=[0,0,0,0]),e=parseInt(t.$slide.width(),10)-(u[1]+u[3]),s=parseInt(t.$slide.height(),10)-(u[0]+u[2]),o=Math.min(1,e/d,s/p),h=Math.floor(o*d),c=Math.floor(o*p),n=Math.floor(.5*(s-c))+u[0],a=Math.floor(.5*(e-h))+u[3],{top:n,left:a,width:h,height:c})},update:function(t,e,s,o){var n,r=this;!0!==r.isAnimating&&r.current&&(n=r.current.pos*Math.floor(r.current.$slide.width())*-1-r.current.pos*r.current.opts.gutter,s=parseInt(s,10)||0,i.fancybox.stop(r.$refs.slider),!1===t?r.updateSlide(r.current,e):i.each(r.slides,function(t,i){r.updateSlide(i,e)}),s?i.fancybox.animate(r.$refs.slider,null,{top:0,left:n},s,function(){r.current.isMoved=!0,"function"===i.type(o)&&o.apply(r)}):(i.fancybox.setTranslate(r.$refs.slider,{top:0,left:n}),r.current.isMoved=!0,"function"===i.type(o)&&o.apply(r)))},updateSlide:function(t,e){var s,o=this,n=t.$placeholder;(t=t||o.current)&&!o.isClosing&&(s=t.pos*Math.floor(t.$slide.width())+t.pos*t.opts.gutter,s!==t.leftPos&&(i.fancybox.setTranslate(t.$slide,{top:0,left:s}),t.leftPos=s),!1!==e&&n&&(i.fancybox.setTranslate(n,o.getFitPos(t)),t.pos===o.currPos&&o.updateCursor()),t.$slide.trigger("refresh"),o.trigger("onUpdate",t))},updateCursor:function(t,e){var i,s=this,o=s.$refs.container.removeClass("fancybox-controls--canzoomIn fancybox-controls--canzoomOut fancybox-controls--canGrab");!s.isClosing&&s.opts.touch&&(i=void 0!==t&&void 0!==e?t<s.current.width&&e<s.current.height:s.isScaledDown(),i?o.addClass("fancybox-controls--canzoomIn"):s.group.length<2?o.addClass("fancybox-controls--canzoomOut"):o.addClass("fancybox-controls--canGrab"))},loadSlide:function(t){var e,s,o,n=this;if(t&&!t.isLoaded&&!t.isLoading){switch(t.isLoading=!0,n.trigger("beforeLoad",t),e=t.type,s=t.$slide,s.off("refresh").trigger("onReset").addClass("fancybox-slide--"+(e||"unknown")).addClass(t.opts.slideClass),e){case"image":n.setImage(t);break;case"iframe":n.setIframe(t);break;case"html":n.setContent(t,t.content);break;case"inline":i(t.src).length?n.setContent(t,i(t.src)):n.setError(t);break;case"ajax":n.showLoading(t),o=i.ajax(i.extend({},t.opts.ajax.settings,{url:t.src,success:function(e,i){"success"===i&&n.setContent(t,e)},error:function(e,i){e&&"abort"!==i&&n.setError(t)}})),s.one("onReset",function(){o.abort()});break;default:n.setError(t)}return!0}},setImage:function(e){var s,o,n,r,a=this,h=e.opts.image.srcset;if(e.isLoaded&&!e.hasError)return void a.afterLoad(e);if(h){n=t.devicePixelRatio||1,r=t.innerWidth*n,o=h.split(",").map(function(t){var e={};return t.trim().split(/\s+/).forEach(function(t,i){var s=parseInt(t.substring(0,t.length-1),10);if(0===i)return e.url=t;s&&(e.value=s,e.postfix=t[t.length-1])}),e}),o.sort(function(t,e){return t.value-e.value});for(var c=0;c<o.length;c++){var l=o[c];if("w"===l.postfix&&l.value>=r||"x"===l.postfix&&l.value>=n){s=l;break}}!s&&o.length&&(s=o[o.length-1]),s&&(e.src=s.url,e.width&&e.height&&"w"==s.postfix&&(e.height=e.width/e.height*s.value,e.width=s.value))}e.$placeholder=i('<div class="fancybox-placeholder"></div>').hide().appendTo(e.$slide),!1!==e.opts.preload&&e.opts.width&&e.opts.height&&(e.opts.thumb||e.opts.$thumb)?(e.width=e.opts.width,e.height=e.opts.height,e.$ghost=i("<img />").one("load error",function(){a.isClosing||(i("<img/>")[0].src=e.src,a.revealImage(e,function(){a.setBigImage(e),a.firstRun&&e.index===a.currIndex&&a.preload()}))}).addClass("fancybox-image").appendTo(e.$placeholder).attr("src",e.opts.thumb||e.opts.$thumb.attr("src"))):a.setBigImage(e)},setBigImage:function(t){var e=this,s=i("<img />");t.$image=s.one("error",function(){e.setError(t)}).one("load",function(){clearTimeout(t.timouts),t.timouts=null,e.isClosing||(t.width=this.naturalWidth,t.height=this.naturalHeight,t.opts.image.srcset&&s.attr("sizes","100vw").attr("srcset",t.opts.image.srcset),e.afterLoad(t),t.$ghost&&(t.timouts=setTimeout(function(){t.$ghost.hide()},350)))}).addClass("fancybox-image").attr("src",t.src).appendTo(t.$placeholder),s[0].complete?s.trigger("load"):s[0].error?s.trigger("error"):t.timouts=setTimeout(function(){s[0].complete||t.hasError||e.showLoading(t)},150),t.opts.image.protect&&i('<div class="fancybox-spaceball"></div>').appendTo(t.$placeholder).on("contextmenu.fb",function(t){return 2==t.button&&t.preventDefault(),!0})},revealImage:function(t,e){var s=this;if(e=e||i.noop,"image"!==t.type||t.hasError||!0===t.isRevealed)return void e.apply(s);t.isRevealed=!0,t.pos===s.currPos&&s.zoomInOut("In",t.opts.speed,e)||(t.$ghost&&!t.isLoaded&&s.updateSlide(t,!0),t.pos===s.currPos?i.fancybox.animate(t.$placeholder,{opacity:0},{opacity:1},300,e):t.$placeholder.show(),e.apply(s))},setIframe:function(t){var e,s=this,o=t.opts.iframe,n=t.$slide;t.$content=i('<div class="fancybox-content"></div>').css(o.css).appendTo(n),e=i(o.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr("scrolling",i.fancybox.isTouch?"auto":o.scrolling).appendTo(t.$content),o.preload?(t.$content.addClass("fancybox-tmp"),s.showLoading(t),e.on("load.fb error.fb",function(e){this.isReady=1,t.$slide.trigger("refresh"),s.afterLoad(t)}),n.on("refresh.fb",function(){var i,s,n,r,a,h=t.$content;if(1===e[0].isReady){try{i=e.contents(),s=i.find("body")}catch(t){}s&&s.length&&(void 0===o.css.width||void 0===o.css.height)&&(n=e[0].contentWindow.document.documentElement.scrollWidth,r=Math.ceil(s.outerWidth(!0)+(h.width()-n)),a=Math.ceil(s.outerHeight(!0)),h.css({width:void 0===o.css.width?r+(h.outerWidth()-h.innerWidth()):o.css.width,height:void 0===o.css.height?a+(h.outerHeight()-h.innerHeight()):o.css.height})),h.removeClass("fancybox-tmp")}})):this.afterLoad(t),e.attr("src",t.src),t.opts.smallBtn&&t.$content.prepend(t.opts.closeTpl),n.one("onReset",function(){try{i(this).find("iframe").hide().attr("src","//about:blank")}catch(t){}i(this).empty(),t.isLoaded=!1})},setContent:function(t,e){var s=this;s.isClosing||(s.hideLoading(t),t.$slide.empty(),c(e)&&e.parent().length?(e.data("placeholder")&&e.parents(".fancybox-slide").trigger("onReset"),e.data({placeholder:i("<div></div>").hide().insertAfter(e)}).css("display","inline-block")):("string"===i.type(e)&&(e=i("<div>").append(e).contents(),3===e[0].nodeType&&(e=i("<div>").html(e))),t.opts.selector&&(e=i("<div>").html(e).find(t.opts.selector))),t.$slide.one("onReset",function(){var s=c(e)?e.data("placeholder"):0;s&&(e.hide().replaceAll(s),e.data("placeholder",null)),t.hasError||(i(this).empty(),t.isLoaded=!1)}),t.$content=i(e).appendTo(t.$slide),!0===t.opts.smallBtn&&t.$content.find(".fancybox-close-small").remove().end().eq(0).append(t.opts.closeTpl),this.afterLoad(t))},setError:function(t){t.hasError=!0,this.setContent(t,t.opts.errorTpl)},showLoading:function(t){var e=this;(t=t||e.current)&&!t.$spinner&&(t.$spinner=i(e.opts.spinnerTpl).appendTo(t.$slide))},hideLoading:function(t){var e=this;(t=t||e.current)&&t.$spinner&&(t.$spinner.remove(),delete t.$spinner)},afterMove:function(){var t=this,e=t.current,s={};e&&(e.$slide.siblings().trigger("onReset"),i.each(t.slides,function(e,i){i.pos>=t.currPos-1&&i.pos<=t.currPos+1?s[i.pos]=i:i&&i.$slide.remove()}),t.slides=s,t.trigger("afterMove"),e.isLoaded&&t.complete())},afterLoad:function(t){var e=this;e.isClosing||(t.isLoading=!1,t.isLoaded=!0,e.trigger("afterLoad",t),e.hideLoading(t),t.$ghost||e.updateSlide(t,!0),t.index===e.currIndex&&t.isMoved?e.complete():t.$ghost||e.revealImage(t))},complete:function(){var t=this,e=t.current;t.revealImage(e,function(){e.isComplete=!0,e.$slide.addClass("fancybox-slide--complete"),t.updateCursor(),t.trigger("onComplete"),e.opts.focus&&"image"!==e.type&&"iframe"!==e.type&&t.focus()})},preload:function(){var t,e,i=this;i.group.length<2||(t=i.slides[i.currPos+1],e=i.slides[i.currPos-1],t&&"image"===t.type&&i.loadSlide(t),e&&"image"===e.type&&i.loadSlide(e))},focus:function(){var t,e=this.current;t=e&&e.isComplete?e.$slide.find('button,:input,[tabindex],a:not(".disabled")').filter(":visible:first"):null,t&&t.length||(t=this.$refs.container),t.focus(),this.$refs.slider_wrap.scrollLeft(0),e&&e.$slide.scrollTop(0)},activate:function(){var t=this;i(".fancybox-container").each(function(){var e=i(this).data("FancyBox");e&&e.uid!==t.uid&&!e.isClosing&&e.trigger("onDeactivate")}),t.current&&(t.$refs.container.index()>0&&t.$refs.container.prependTo(e.body),t.updateControls()),t.trigger("onActivate"),t.addEvents()},close:function(t){var e=this,s=e.current,o=s.opts.speed,n=i.proxy(function(){e.cleanUp(t)},this);return!e.isAnimating&&!e.isClosing&&(!1===e.trigger("beforeClose",t)?(i.fancybox.stop(e.$refs.slider),void l(function(){e.update(!0,!0,150)})):(e.isClosing=!0,s.timouts&&clearTimeout(s.timouts),!0!==t&&i.fancybox.stop(e.$refs.slider),e.$refs.container.removeClass("fancybox-container--active").addClass("fancybox-container--closing"),s.$slide.removeClass("fancybox-slide--complete").siblings().remove(),s.isMoved||s.$slide.css("overflow","visible"),e.removeEvents(),e.hideLoading(s),e.hideControls(),e.updateCursor(),e.$refs.bg.css("transition-duration",o+"ms"),this.$refs.container.removeClass("fancybox-container--ready"),void(!0===t?setTimeout(n,o):e.zoomInOut("Out",o,n)||i.fancybox.animate(e.$refs.container,null,{opacity:0},o,"easeInSine",n))))},cleanUp:function(t){var e,s=this;s.$refs.slider.children().trigger("onReset"),s.$refs.container.empty().remove(),s.trigger("afterClose",t),s.current=null,e=i.fancybox.getInstance(),e?e.activate():(i("html").removeClass("fancybox-enabled"),i("body").removeAttr("style"),r.scrollTop(s.scrollTop).scrollLeft(s.scrollLeft),i("#fancybox-noscroll").remove()),s.$lastFocus&&s.$lastFocus.focus()},trigger:function(t,s){var o,n=Array.prototype.slice.call(arguments,1),r=this,a=s&&s.opts?s:r.current;if(a?n.unshift(a):a=r,n.unshift(r),i.isFunction(a.opts[t])&&(o=a.opts[t].apply(a,n)),!1===o)return o;"afterClose"===t?i(e).trigger(t+".fb",n):r.$refs.container.trigger(t+".fb",n)},toggleControls:function(t){this.isHiddenControls?this.updateControls(t):this.hideControls()},hideControls:function(){this.isHiddenControls=!0,this.$refs.container.removeClass("fancybox-show-controls"),this.$refs.container.removeClass("fancybox-show-caption")},updateControls:function(t){var e=this,s=e.$refs.container,o=e.$refs.caption,n=e.current,r=n.index,a=n.opts,h=a.caption;this.isHiddenControls&&!0!==t||(this.isHiddenControls=!1,s.addClass("fancybox-show-controls").toggleClass("fancybox-show-infobar",!!a.infobar&&e.group.length>1).toggleClass("fancybox-show-buttons",!!a.buttons).toggleClass("fancybox-is-modal",!!a.modal),i(".fancybox-button--left",s).toggleClass("fancybox-button--disabled",!a.loop&&r<=0),i(".fancybox-button--right",s).toggleClass("fancybox-button--disabled",!a.loop&&r>=e.group.length-1),i(".fancybox-button--play",s).toggle(!!(a.slideShow&&e.group.length>1)),i(".fancybox-button--close",s).toggle(!!a.closeBtn),i(".js-fancybox-count",s).html(e.group.length),i(".js-fancybox-index",s).html(r+1),n.$slide.trigger("refresh"),o&&o.empty(),h&&h.length?(o.html(h),this.$refs.container.addClass("fancybox-show-caption "),e.$caption=o):this.$refs.container.removeClass("fancybox-show-caption"))}}),i.fancybox={version:"3.0.47",defaults:n,getInstance:function(t){var e=i('.fancybox-container:not(".fancybox-container--closing"):first').data("FancyBox"),s=Array.prototype.slice.call(arguments,1);return e instanceof p&&("string"===i.type(t)?e[t].apply(e,s):"function"===i.type(t)&&t.apply(e,s),e)},open:function(t,e,i){return new p(t,e,i)},close:function(t){var e=this.getInstance();e&&(e.close(),!0===t&&this.close())},isTouch:void 0!==e.createTouch&&/Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent),use3d:function(){var i=e.createElement("div");return t.getComputedStyle(i).getPropertyValue("transform")&&!(e.documentMode&&e.documentMode<=11)}(),getTranslate:function(t){var e,i;return!(!t||!t.length)&&(e=t.get(0).getBoundingClientRect(),i=t.eq(0).css("transform"),i&&-1!==i.indexOf("matrix")?(i=i.split("(")[1],i=i.split(")")[0],i=i.split(",")):i=[],i.length?(i=i.length>10?[i[13],i[12],i[0],i[5]]:[i[5],i[4],i[0],i[3]],i=i.map(parseFloat)):i=[0,0,1,1],{top:i[0],left:i[1],scaleX:i[2],scaleY:i[3],opacity:parseFloat(t.css("opacity")),width:e.width,height:e.height})},setTranslate:function(t,e){var i="",s={};if(t&&e)return void 0===e.left&&void 0===e.top||(i=(void 0===e.left?t.position().top:e.left)+"px, "+(void 0===e.top?t.position().top:e.top)+"px",i=this.use3d?"translate3d("+i+", 0px)":"translate("+i+")"),void 0!==e.scaleX&&void 0!==e.scaleY&&(i=(i.length?i+" ":"")+"scale("+e.scaleX+", "+e.scaleY+")"),i.length&&(s.transform=i),void 0!==e.opacity&&(s.opacity=e.opacity),void 0!==e.width&&(s.width=e.width),void 0!==e.height&&(s.height=e.height),t.css(s)},easing:{easeOutCubic:function(t,e,i,s){return i*((t=t/s-1)*t*t+1)+e},easeInCubic:function(t,e,i,s){return i*(t/=s)*t*t+e},easeOutSine:function(t,e,i,s){return i*Math.sin(t/s*(Math.PI/2))+e},easeInSine:function(t,e,i,s){return-i*Math.cos(t/s*(Math.PI/2))+i+e}},stop:function(t){t.removeData("animateID")},animate:function(t,e,s,o,n,r){var a,h,c,d=this,p=null,u=0,f=function(){void 0!==s.scaleX&&void 0!==s.scaleY&&e&&void 0!==e.width&&void 0!==e.height&&(s.width=e.width*s.scaleX,s.height=e.height*s.scaleY,s.scaleX=1,s.scaleY=1),d.setTranslate(t,s),r()},m=function(i){if(a=[],h=0,t.length&&t.data("animateID")===c){if(i=i||Date.now(),p&&(h=i-p),p=i,(u+=h)>=o)return void f();for(var r in s)s.hasOwnProperty(r)&&void 0!==e[r]&&(e[r]==s[r]?a[r]=s[r]:a[r]=d.easing[n](u,e[r],s[r]-e[r],o));d.setTranslate(t,a),l(m)}};d.animateID=c=void 0===d.animateID?1:d.animateID+1,t.data("animateID",c),void 0===r&&"function"==i.type(n)&&(r=n,n=void 0),n||(n="easeOutCubic"),r=r||i.noop,e?this.setTranslate(t,e):e=this.getTranslate(t),o?(t.show(),l(m)):f()}},i.fn.fancybox=function(t){return this.off("click.fb-start").on("click.fb-start",{items:this,options:t||{}},o),this},i(e).on("click.fb-start","[data-fancybox]",o)}}(window,document,window.jQuery),function(t){"use strict";var e=function(e,i,s){if(e)return s=s||"","object"===t.type(s)&&(s=t.param(s,!0)),t.each(i,function(t,i){e=e.replace("$"+t,i||"")}),s.length&&(e+=(e.indexOf("?")>0?"&":"?")+s),e},i={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"//www.youtube.com/embed/$4",thumb:"//img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1,api:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},metacafe:{matcher:/metacafe.com\/watch\/(\d+)\/(.*)?/,type:"iframe",url:"//www.metacafe.com/embed/$1/?ap=1"},dailymotion:{matcher:/dailymotion.com\/video\/(.*)\/?(.*)/,params:{additionalInfos:0,autoStart:1},type:"iframe",url:"//www.dailymotion.com/embed/video/$1"},vine:{matcher:/vine.co\/v\/([a-zA-Z0-9\?\=\-]+)/,type:"iframe",url:"//vine.co/v/$1/embed/simple"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},google_maps:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/?ll="+(t[9]?t[9]+"&z="+Math.floor(t[10])+(t[12]?t[12].replace(/^\//,"&"):""):t[12])+"&output="+(t[12]&&t[12].indexOf("layer=c")>0?"svembed":"embed")}}}
;t(document).on("onInit.fb",function(s,o){t.each(o.group,function(s,o){var n,r,a,h,c,l,d=o.src||"",p=!1;o.type||(t.each(i,function(i,s){if(r=d.match(s.matcher),c={},l=i,r){if(p=s.type,s.paramPlace&&r[s.paramPlace]){h=r[s.paramPlace],"?"==h[0]&&(h=h.substring(1)),h=h.split("&");for(var u=0;u<h.length;++u){var f=h[u].split("=",2);2==f.length&&(c[f[0]]=decodeURIComponent(f[1].replace(/\+/g," ")))}}return a=t.extend(!0,{},s.params,o.opts[i],c),d="function"===t.type(s.url)?s.url.call(this,r,a,o):e(s.url,r,a),n="function"===t.type(s.thumb)?s.thumb.call(this,r,a,o):e(s.thumb,r),"vimeo"===l&&(d=d.replace("&%23","#")),!1}}),p?(o.src=d,o.type=p,o.opts.thumb||o.opts.$thumb&&o.opts.$thumb.length||(o.opts.thumb=n),"iframe"===p&&(t.extend(!0,o.opts,{iframe:{preload:!1,scrolling:"no"},smallBtn:!1,closeBtn:!0,fullScreen:!1,slideShow:!1}),o.opts.slideClass+=" fancybox-slide--video")):o.type="iframe")})})}(window.jQuery),function(t,e,i){"use strict";var s=function(){return t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||function(e){t.setTimeout(e,1e3/60)}}(),o=function(e){var i=[];e=e.originalEvent||e||t.e,e=e.touches&&e.touches.length?e.touches:e.changedTouches&&e.changedTouches.length?e.changedTouches:[e];for(var s in e)e[s].pageX?i.push({x:e[s].pageX,y:e[s].pageY}):e[s].clientX&&i.push({x:e[s].clientX,y:e[s].clientY});return i},n=function(t,e,i){return e&&t?"x"===i?t.x-e.x:"y"===i?t.y-e.y:Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)):0},r=function(t){return t.is("a")||t.is("button")||t.is("input")||t.is("select")||t.is("textarea")||i.isFunction(t.get(0).onclick)},a=function(e){var i=t.getComputedStyle(e)["overflow-y"],s=t.getComputedStyle(e)["overflow-x"],o=("scroll"===i||"auto"===i)&&e.scrollHeight>e.clientHeight,n=("scroll"===s||"auto"===s)&&e.scrollWidth>e.clientWidth;return o||n},h=function(t){for(var e=!1;;){if(e=a(t.get(0)))break;if(t=t.parent(),!t.length||t.hasClass("fancybox-slider")||t.is("body"))break}return e},c=function(t){var e=this;e.instance=t,e.$wrap=t.$refs.slider_wrap,e.$slider=t.$refs.slider,e.$container=t.$refs.container,e.destroy(),e.$wrap.on("touchstart.fb mousedown.fb",i.proxy(e,"ontouchstart"))};c.prototype.destroy=function(){this.$wrap.off("touchstart.fb mousedown.fb touchmove.fb mousemove.fb touchend.fb touchcancel.fb mouseup.fb mouseleave.fb")},c.prototype.ontouchstart=function(e){var s=this,a=i(e.target),c=s.instance,l=c.current,d=l.$content||l.$placeholder;return s.startPoints=o(e),s.$target=a,s.$content=d,s.canvasWidth=Math.round(l.$slide[0].clientWidth),s.canvasHeight=Math.round(l.$slide[0].clientHeight),s.startEvent=e,e.originalEvent.clientX>s.canvasWidth+l.$slide.offset().left||(r(a)||r(a.parent())||h(a)?void 0:l.opts.touch?void(e.originalEvent&&2==e.originalEvent.button||(e.stopPropagation(),e.preventDefault(),!l||s.instance.isAnimating||s.instance.isClosing||!s.startPoints||s.startPoints.length>1&&!l.isMoved||(s.$wrap.off("touchmove.fb mousemove.fb",i.proxy(s,"ontouchmove")),s.$wrap.off("touchend.fb touchcancel.fb mouseup.fb mouseleave.fb",i.proxy(s,"ontouchend")),s.$wrap.on("touchend.fb touchcancel.fb mouseup.fb mouseleave.fb",i.proxy(s,"ontouchend")),s.$wrap.on("touchmove.fb mousemove.fb",i.proxy(s,"ontouchmove")),s.startTime=(new Date).getTime(),s.distanceX=s.distanceY=s.distance=0,s.canTap=!1,s.isPanning=!1,s.isSwiping=!1,s.isZooming=!1,s.sliderStartPos=i.fancybox.getTranslate(s.$slider),s.contentStartPos=i.fancybox.getTranslate(s.$content),s.contentLastPos=null,1!==s.startPoints.length||s.isZooming||(s.canTap=l.isMoved,"image"===l.type&&(s.contentStartPos.width>s.canvasWidth+1||s.contentStartPos.height>s.canvasHeight+1)?(i.fancybox.stop(s.$content),s.isPanning=!0):(i.fancybox.stop(s.$slider),s.isSwiping=!0),s.$container.addClass("fancybox-controls--isGrabbing")),2===s.startPoints.length&&l.isMoved&&!l.hasError&&"image"===l.type&&(l.isLoaded||l.$ghost)&&(s.isZooming=!0,s.isSwiping=!1,s.isPanning=!1,i.fancybox.stop(s.$content),s.centerPointStartX=.5*(s.startPoints[0].x+s.startPoints[1].x)-i(t).scrollLeft(),s.centerPointStartY=.5*(s.startPoints[0].y+s.startPoints[1].y)-i(t).scrollTop(),s.percentageOfImageAtPinchPointX=(s.centerPointStartX-s.contentStartPos.left)/s.contentStartPos.width,s.percentageOfImageAtPinchPointY=(s.centerPointStartY-s.contentStartPos.top)/s.contentStartPos.height,s.startDistanceBetweenFingers=n(s.startPoints[0],s.startPoints[1]))))):(s.endPoints=s.startPoints,s.ontap()))},c.prototype.ontouchmove=function(t){var e=this;t.preventDefault(),e.newPoints=o(t),e.newPoints&&e.newPoints.length&&(e.distanceX=n(e.newPoints[0],e.startPoints[0],"x"),e.distanceY=n(e.newPoints[0],e.startPoints[0],"y"),e.distance=n(e.newPoints[0],e.startPoints[0]),e.distance>0&&(e.isSwiping?e.onSwipe():e.isPanning?e.onPan():e.isZooming&&e.onZoom()))},c.prototype.onSwipe=function(){var e,o=this,n=o.isSwiping,r=o.sliderStartPos.left;!0===n?Math.abs(o.distance)>10&&(o.instance.group.length<2?o.isSwiping="y":!o.instance.current.isMoved||!1===o.instance.opts.touch.vertical||"auto"===o.instance.opts.touch.vertical&&i(t).width()>800?o.isSwiping="x":(e=Math.abs(180*Math.atan2(o.distanceY,o.distanceX)/Math.PI),o.isSwiping=e>45&&e<135?"y":"x"),o.canTap=!1,o.instance.current.isMoved=!1,o.startPoints=o.newPoints):("x"==n&&(!o.instance.current.opts.loop&&0===o.instance.current.index&&o.distanceX>0?r+=Math.pow(o.distanceX,.8):!o.instance.current.opts.loop&&o.instance.current.index===o.instance.group.length-1&&o.distanceX<0?r-=Math.pow(-o.distanceX,.8):r+=o.distanceX),o.sliderLastPos={top:"x"==n?0:o.sliderStartPos.top+o.distanceY,left:r},s(function(){i.fancybox.setTranslate(o.$slider,o.sliderLastPos)}))},c.prototype.onPan=function(){var t,e,o,n=this;n.canTap=!1,t=n.contentStartPos.width>n.canvasWidth?n.contentStartPos.left+n.distanceX:n.contentStartPos.left,e=n.contentStartPos.top+n.distanceY,o=n.limitMovement(t,e,n.contentStartPos.width,n.contentStartPos.height),o.scaleX=n.contentStartPos.scaleX,o.scaleY=n.contentStartPos.scaleY,n.contentLastPos=o,s(function(){i.fancybox.setTranslate(n.$content,n.contentLastPos)})},c.prototype.limitMovement=function(t,e,i,s){var o,n,r,a,h=this,c=h.canvasWidth,l=h.canvasHeight,d=h.contentStartPos.left,p=h.contentStartPos.top,u=h.distanceX,f=h.distanceY;return o=Math.max(0,.5*c-.5*i),n=Math.max(0,.5*l-.5*s),r=Math.min(c-i,.5*c-.5*i),a=Math.min(l-s,.5*l-.5*s),i>c&&(u>0&&t>o&&(t=o-1+Math.pow(-o+d+u,.8)||0),u<0&&t<r&&(t=r+1-Math.pow(r-d-u,.8)||0)),s>l&&(f>0&&e>n&&(e=n-1+Math.pow(-n+p+f,.8)||0),f<0&&e<a&&(e=a+1-Math.pow(a-p-f,.8)||0)),{top:e,left:t}},c.prototype.limitPosition=function(t,e,i,s){var o=this,n=o.canvasWidth,r=o.canvasHeight;return i>n?(t=t>0?0:t,t=t<n-i?n-i:t):t=Math.max(0,n/2-i/2),s>r?(e=e>0?0:e,e=e<r-s?r-s:e):e=Math.max(0,r/2-s/2),{top:e,left:t}},c.prototype.onZoom=function(){var e=this,o=e.contentStartPos.width,r=e.contentStartPos.height,a=e.contentStartPos.left,h=e.contentStartPos.top,c=n(e.newPoints[0],e.newPoints[1]),l=c/e.startDistanceBetweenFingers,d=Math.floor(o*l),p=Math.floor(r*l),u=(o-d)*e.percentageOfImageAtPinchPointX,f=(r-p)*e.percentageOfImageAtPinchPointY,m=(e.newPoints[0].x+e.newPoints[1].x)/2-i(t).scrollLeft(),g=(e.newPoints[0].y+e.newPoints[1].y)/2-i(t).scrollTop(),_=m-e.centerPointStartX,v=g-e.centerPointStartY,y=a+(u+_),b=h+(f+v),w={top:b,left:y,scaleX:e.contentStartPos.scaleX*l,scaleY:e.contentStartPos.scaleY*l};e.canTap=!1,e.newWidth=d,e.newHeight=p,e.contentLastPos=w,s(function(){i.fancybox.setTranslate(e.$content,e.contentLastPos)})},c.prototype.ontouchend=function(t){var e=this,s=e.instance.current,n=Math.max((new Date).getTime()-e.startTime,1),r=e.isSwiping,a=e.isPanning,h=e.isZooming;if(e.endPoints=o(t),e.$container.removeClass("fancybox-controls--isGrabbing"),e.$wrap.off("touchmove.fb mousemove.fb",i.proxy(this,"ontouchmove")),e.$wrap.off("touchend.fb touchcancel.fb mouseup.fb mouseleave.fb",i.proxy(this,"ontouchend")),e.isSwiping=!1,e.isPanning=!1,e.isZooming=!1,e.canTap)return e.ontap();e.velocityX=e.distanceX/n*.5,e.velocityY=e.distanceY/n*.5,e.speed=s.opts.speed||330,e.speedX=Math.max(.75*e.speed,Math.min(1.5*e.speed,1/Math.abs(e.velocityX)*e.speed)),e.speedY=Math.max(.75*e.speed,Math.min(1.5*e.speed,1/Math.abs(e.velocityY)*e.speed)),a?e.endPanning():h?e.endZooming():e.endSwiping(r)},c.prototype.endSwiping=function(t){var e=this;"y"==t&&Math.abs(e.distanceY)>50?(i.fancybox.animate(e.$slider,null,{top:e.sliderStartPos.top+e.distanceY+150*e.velocityY,left:e.sliderStartPos.left,opacity:0},e.speedY),e.instance.close(!0)):"x"==t&&e.distanceX>50?e.instance.previous(e.speedX):"x"==t&&e.distanceX<-50?e.instance.next(e.speedX):e.instance.update(!1,!0,150)},c.prototype.endPanning=function(){var t,e,s,o=this;o.contentLastPos&&(t=o.contentLastPos.left+o.velocityX*o.speed*2,e=o.contentLastPos.top+o.velocityY*o.speed*2,s=o.limitPosition(t,e,o.contentStartPos.width,o.contentStartPos.height),s.width=o.contentStartPos.width,s.height=o.contentStartPos.height,i.fancybox.animate(o.$content,null,s,o.speed,"easeOutSine"))},c.prototype.endZooming=function(){var t,e,s,o,n=this,r=n.instance.current,a=n.newWidth,h=n.newHeight;n.contentLastPos&&(t=n.contentLastPos.left,e=n.contentLastPos.top,o={top:e,left:t,width:a,height:h,scaleX:1,scaleY:1},i.fancybox.setTranslate(n.$content,o),a<n.canvasWidth&&h<n.canvasHeight?n.instance.scaleToFit(150):a>r.width||h>r.height?n.instance.scaleToActual(n.centerPointStartX,n.centerPointStartY,150):(s=n.limitPosition(t,e,a,h),i.fancybox.animate(n.$content,null,s,n.speed,"easeOutSine")))},c.prototype.ontap=function(){var t=this,e=t.instance,s=e.current,o=t.endPoints[0].x,n=t.endPoints[0].y;if(o-=t.$wrap.offset().left,n-=t.$wrap.offset().top,e.SlideShow&&e.SlideShow.isActive&&e.SlideShow.stop(),!i.fancybox.isTouch)return s.opts.closeClickOutside&&t.$target.is(".fancybox-slide")?void e.close(t.startEvent):void("image"==s.type&&s.isMoved&&(e.canPan()?e.scaleToFit():e.isScaledDown()?e.scaleToActual(o,n):e.group.length<2&&e.close(t.startEvent)));if(t.tapped){if(clearTimeout(t.tapped),t.tapped=null,Math.abs(o-t.x)>50||Math.abs(n-t.y)>50||!s.isMoved)return this;"image"==s.type&&(s.isLoaded||s.$ghost)&&(e.canPan()?e.scaleToFit():e.isScaledDown()&&e.scaleToActual(o,n))}else t.x=o,t.y=n,t.tapped=setTimeout(function(){t.tapped=null,e.toggleControls(!0)},300);return this},i(e).on("onActivate.fb",function(t,e){e&&!e.Guestures&&(e.Guestures=new c(e))}),i(e).on("beforeClose.fb",function(t,e){e&&e.Guestures&&e.Guestures.destroy()})}(window,document,window.jQuery),function(t,e){"use strict";var i=function(t){this.instance=t,this.init()};e.extend(i.prototype,{timer:null,isActive:!1,$button:null,speed:3e3,init:function(){var t=this;t.$button=e('<button data-fancybox-play class="fancybox-button fancybox-button--play" title="Slideshow (P)"></button>').appendTo(t.instance.$refs.buttons),t.instance.$refs.container.on("click","[data-fancybox-play]",function(){t.toggle()})},set:function(){var t=this;t.instance&&t.instance.current&&(t.instance.current.opts.loop||t.instance.currIndex<t.instance.group.length-1)?t.timer=setTimeout(function(){t.instance.next()},t.instance.current.opts.slideShow.speed||t.speed):t.stop()},clear:function(){var t=this;clearTimeout(t.timer),t.timer=null},start:function(){var t=this;t.stop(),t.instance&&t.instance.current&&(t.instance.current.opts.loop||t.instance.currIndex<t.instance.group.length-1)&&(t.instance.$refs.container.on({"beforeLoad.fb.player":e.proxy(t,"clear"),"onComplete.fb.player":e.proxy(t,"set")}),t.isActive=!0,t.instance.current.isComplete&&t.set(),t.instance.$refs.container.trigger("onPlayStart"),t.$button.addClass("fancybox-button--pause"))},stop:function(){var t=this;t.clear(),t.instance.$refs.container.trigger("onPlayEnd").off(".player"),t.$button.removeClass("fancybox-button--pause"),t.isActive=!1},toggle:function(){var t=this;t.isActive?t.stop():t.start()}}),e(t).on("onInit.fb",function(t,e){e&&e.group.length>1&&e.opts.slideShow&&!e.SlideShow&&(e.SlideShow=new i(e))}),e(t).on("beforeClose.fb onDeactivate.fb",function(t,e){e&&e.SlideShow&&e.SlideShow.stop()})}(document,window.jQuery),function(t,e){"use strict";var i=function(){var e,i,s,o=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],n={};for(i=0;i<o.length;i++)if((e=o[i])&&e[1]in t){for(s=0;s<e.length;s++)n[o[0][s]]=e[s];return n}return!1}();if(i){var s={request:function(e){e=e||t.documentElement,e[i.requestFullscreen](e.ALLOW_KEYBOARD_INPUT)},exit:function(){t[i.exitFullscreen]()},toggle:function(t){this.isFullscreen()?this.exit():this.request(t)},isFullscreen:function(){return Boolean(t[i.fullscreenElement])},enabled:function(){return Boolean(t[i.fullscreenEnabled])}};e(t).on({"onInit.fb":function(t,i){var o;i&&i.opts.fullScreen&&!i.FullScreen&&(o=i.$refs.container,i.$refs.button_fs=e('<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fullscreen" title="Full screen (F)"></button>').appendTo(i.$refs.buttons),o.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(t){t.stopPropagation(),t.preventDefault(),s.toggle(o[0])}),!0===i.opts.fullScreen.requestOnStart&&s.request(o[0]))},"beforeMove.fb":function(t,e){e&&e.$refs.button_fs&&e.$refs.button_fs.toggle(!!e.current.opts.fullScreen)},"beforeClose.fb":function(){s.exit()}}),e(t).on(i.fullscreenchange,function(){var t=e.fancybox.getInstance(),i=t?t.current.$placeholder:null;i&&(i.css("transition","none"),t.isAnimating=!1,t.update(!0,!0,0))})}}(document,window.jQuery),function(t,e){"use strict";var i=function(t){this.instance=t,this.init()};e.extend(i.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,init:function(){var t=this;t.$button=e('<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="Thumbnails (G)"></button>').appendTo(this.instance.$refs.buttons).on("touchend click",function(e){e.stopPropagation(),e.preventDefault(),t.toggle()})},create:function(){var t,i,s=this.instance;this.$grid=e('<div class="fancybox-thumbs"></div>').appendTo(s.$refs.container),t="<ul>",e.each(s.group,function(e,s){i=s.opts.thumb||(s.opts.$thumb?s.opts.$thumb.attr("src"):null),i||"image"!==s.type||(i=s.src),i&&i.length&&(t+='<li data-index="'+e+'"  tabindex="0" class="fancybox-thumbs-loading"><img data-src="'+i+'" /></li>')}),t+="</ul>",this.$list=e(t).appendTo(this.$grid).on("click touchstart","li",function(){s.jumpTo(e(this).data("index"))}),this.$list.find("img").hide().one("load",function(){var t,i,s,o,n=e(this).parent().removeClass("fancybox-thumbs-loading"),r=n.outerWidth(),a=n.outerHeight();t=this.naturalWidth||this.width,i=this.naturalHeight||this.height,s=t/r,o=i/a,s>=1&&o>=1&&(s>o?(t/=o,i=a):(t=r,i/=s)),e(this).css({width:Math.floor(t),height:Math.floor(i),"margin-top":Math.min(0,Math.floor(.3*a-.3*i)),"margin-left":Math.min(0,Math.floor(.5*r-.5*t))}).show()}).each(function(){this.src=e(this).data("src")})},focus:function(){this.instance.current&&this.$list.children().removeClass("fancybox-thumbs-active").filter('[data-index="'+this.instance.current.index+'"]').addClass("fancybox-thumbs-active").focus()},close:function(){this.$grid.hide()},update:function(){this.instance.$refs.container.toggleClass("fancybox-container--thumbs",this.isVisible),this.isVisible?(this.$grid||this.create(),this.$grid.show(),this.focus()):this.$grid&&this.$grid.hide(),this.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible?this.hide():this.show()}}),e(t).on("onInit.fb",function(t,e){var s=e.group[0],o=e.group[1];e.opts.thumbs&&!e.Thumbs&&e.group.length>1&&("image"==s.type||s.opts.thumb||s.opts.$thumb)&&("image"==o.type||o.opts.thumb||o.opts.$thumb)&&(e.Thumbs=new i(e))}),e(t).on("beforeMove.fb",function(t,e,i){var s=e&&e.Thumbs;s&&(i.modal?(s.$button.hide(),s.hide()):(!0===e.opts.thumbs.showOnStart&&e.firstRun&&s.show(),s.$button.show(),s.isVisible&&s.focus()))}),e(t).on("beforeClose.fb",function(t,e){e&&e.Thumbs&&(e.Thumbs.isVisible&&!1!==e.opts.thumbs.hideOnClosing&&e.Thumbs.close(),e.Thumbs=null)})}(document,window.jQuery),function(t,e,i){"use strict";function s(){var t=e.location.hash.substr(1),i=t.split("-"),s=i.length>1&&/^\+?\d+$/.test(i[i.length-1])?parseInt(i.pop(-1),10)||1:1,o=i.join("-");return s<1&&(s=1),{hash:t,index:s,gallery:o}}function o(t){var e;""!==t.gallery&&(e=i("[data-fancybox='"+i.escapeSelector(t.gallery)+"']").eq(t.index-1),e.length?e.trigger("click"):i("#"+i.escapeSelector(t.gallery)).trigger("click"))}function n(t){var e;return!!t&&(e=t.current?t.current.opts:t.opts,e.$orig?e.$orig.data("fancybox"):e.hash||"")}i.escapeSelector||(i.escapeSelector=function(t){return(t+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t})});var r=null;i(function(){setTimeout(function(){!1!==i.fancybox.defaults.hash&&(i(e).on("hashchange.fb",function(){var t=s();i.fancybox.getInstance()?r&&r!==t.gallery+"-"+t.index&&(r=null,i.fancybox.close()):""!==t.gallery&&o(t)}),i(t).on({"onInit.fb":function(t,e){var i=s(),o=n(e);o&&i.gallery&&o==i.gallery&&(e.currIndex=i.index-1)},"beforeMove.fb":function(i,s,o){var a=n(s);a&&""!==a&&(e.location.hash.indexOf(a)<0&&(s.opts.origHash=e.location.hash),r=a+(s.group.length>1?"-"+(o.index+1):""),"pushState"in history?history.pushState("",t.title,e.location.pathname+e.location.search+"#"+r):e.location.hash=r)},"beforeClose.fb":function(i,s,o){var a=n(s),h=s&&s.opts.origHash?s.opts.origHash:"";a&&""!==a&&("pushState"in history?history.pushState("",t.title,e.location.pathname+e.location.search+h):e.location.hash=h),r=null}}),o(s()))},50)})}(document,window,window.jQuery),function(t){"function"==typeof define&&define.amd?define(["jquery"],function(e){return t(e,document,window,navigator)}):"object"==typeof exports?t(require("jquery"),document,window,navigator):t(jQuery,document,window,navigator)}(function(t,e,i,s,o){"use strict";var n=0,r=function(){var e,i=s.userAgent,o=/msie\s\d+/i;return i.search(o)>0&&(e=o.exec(i).toString(),(e=e.split(" ")[1])<9)&&(t("html").addClass("lt-ie9"),!0)}();Function.prototype.bind||(Function.prototype.bind=function(t){var e=this,i=[].slice;if("function"!=typeof e)throw new TypeError;var s=i.call(arguments,1),o=function(){if(this instanceof o){var n=function(){};n.prototype=e.prototype;var r=new n,a=e.apply(r,s.concat(i.call(arguments)));return Object(a)===a?a:r}return e.apply(t,s.concat(i.call(arguments)))};return o}),Array.prototype.indexOf||(Array.prototype.indexOf=function(t,e){var i;if(null==this)throw new TypeError('"this" is null or not defined');var s=Object(this),o=s.length>>>0;if(0===o)return-1;var n=+e||0;if(Math.abs(n)===1/0&&(n=0),n>=o)return-1;for(i=Math.max(n>=0?n:o-Math.abs(n),0);i<o;){if(i in s&&s[i]===t)return i;i++}return-1});var a=function(s,n,r){this.VERSION="2.1.7",this.input=s,this.plugin_count=r,this.current_plugin=0,this.calc_count=0,this.update_tm=0,this.old_from=0,this.old_to=0,this.old_min_interval=null,this.raf_id=null,this.dragging=!1,this.force_redraw=!1,this.no_diapason=!1,this.is_key=!1,this.is_update=!1,this.is_start=!0,this.is_finish=!1,this.is_active=!1,this.is_resize=!1,this.is_click=!1,n=n||{},this.$cache={win:t(i),body:t(e.body),input:t(s),cont:null,rs:null,min:null,max:null,from:null,to:null,single:null,bar:null,line:null,s_single:null,s_from:null,s_to:null,shad_single:null,shad_from:null,shad_to:null,edge:null,grid:null,grid_labels:[]},this.coords={x_gap:0,x_pointer:0,w_rs:0,w_rs_old:0,w_handle:0,p_gap:0,p_gap_left:0,p_gap_right:0,p_step:0,p_pointer:0,p_handle:0,p_single_fake:0,p_single_real:0,p_from_fake:0,p_from_real:0,p_to_fake:0,p_to_real:0,p_bar_x:0,p_bar_w:0,grid_gap:0,big_num:0,big:[],big_w:[],big_p:[],big_x:[]},this.labels={w_min:0,w_max:0,w_from:0,w_to:0,w_single:0,p_min:0,p_max:0,p_from_fake:0,p_from_left:0,p_to_fake:0,p_to_left:0,p_single_fake:0,p_single_left:0};var a,h,c,l=this.$cache.input,d=l.prop("value");a={type:"single",min:10,max:100,from:null,to:null,step:1,min_interval:0,max_interval:0,drag_interval:!1,values:[],p_values:[],from_fixed:!1,from_min:null,from_max:null,from_shadow:!1,to_fixed:!1,to_min:null,to_max:null,to_shadow:!1,prettify_enabled:!0,prettify_separator:" ",prettify:null,force_edges:!1,keyboard:!1,keyboard_step:5,grid:!1,grid_margin:!0,grid_num:4,grid_snap:!1,hide_min_max:!1,hide_from_to:!1,prefix:"",postfix:"",max_postfix:"",decorate_both:!0,values_separator:" — ",input_values_separator:";",disable:!1,onStart:null,onChange:null,onFinish:null,onUpdate:null},"INPUT"!==l[0].nodeName&&console&&console.warn&&console.warn("Base element should be <input>!",l[0]),h={type:l.data("type"),min:l.data("min"),max:l.data("max"),from:l.data("from"),to:l.data("to"),step:l.data("step"),min_interval:l.data("minInterval"),max_interval:l.data("maxInterval"),drag_interval:l.data("dragInterval"),values:l.data("values"),from_fixed:l.data("fromFixed"),from_min:l.data("fromMin"),from_max:l.data("fromMax"),from_shadow:l.data("fromShadow"),to_fixed:l.data("toFixed"),to_min:l.data("toMin"),to_max:l.data("toMax"),to_shadow:l.data("toShadow"),prettify_enabled:l.data("prettifyEnabled"),prettify_separator:l.data("prettifySeparator"),force_edges:l.data("forceEdges"),keyboard:l.data("keyboard"),keyboard_step:l.data("keyboardStep"),grid:l.data("grid"),grid_margin:l.data("gridMargin"),grid_num:l.data("gridNum"),grid_snap:l.data("gridSnap"),hide_min_max:l.data("hideMinMax"),hide_from_to:l.data("hideFromTo"),prefix:l.data("prefix"),postfix:l.data("postfix"),max_postfix:l.data("maxPostfix"),decorate_both:l.data("decorateBoth"),values_separator:l.data("valuesSeparator"),input_values_separator:l.data("inputValuesSeparator"),disable:l.data("disable")},h.values=h.values&&h.values.split(",");for(c in h)h.hasOwnProperty(c)&&(h[c]!==o&&""!==h[c]||delete h[c]);d!==o&&""!==d&&(d=d.split(h.input_values_separator||n.input_values_separator||";"),d[0]&&d[0]==+d[0]&&(d[0]=+d[0]),d[1]&&d[1]==+d[1]&&(d[1]=+d[1]),n&&n.values&&n.values.length?(a.from=d[0]&&n.values.indexOf(d[0]),a.to=d[1]&&n.values.indexOf(d[1])):(a.from=d[0]&&+d[0],a.to=d[1]&&+d[1])),t.extend(a,n),t.extend(a,h),this.options=a,this.update_check={},this.validate(),this.result={input:this.$cache.input,slider:null,min:this.options.min,max:this.options.max,from:this.options.from,from_percent:0,from_value:null,to:this.options.to,to_percent:0,to_value:null},this.init()};a.prototype={init:function(t){this.no_diapason=!1,this.coords.p_step=this.convertToPercent(this.options.step,!0),this.target="base",this.toggleInput(),this.append(),this.setMinMax(),t?(this.force_redraw=!0,this.calc(!0),this.callOnUpdate()):(this.force_redraw=!0,this.calc(!0),this.callOnStart()),this.updateScene()},append:function(){var t='<span class="irs js-irs-'+this.plugin_count+'"></span>';this.$cache.input.before(t),this.$cache.input.prop("readonly",!0),this.$cache.cont=this.$cache.input.prev(),this.result.slider=this.$cache.cont,this.$cache.cont.html('<span class="irs"><span class="irs-line" tabindex="-1"><span class="irs-line-left"></span><span class="irs-line-mid"></span><span class="irs-line-right"></span></span><span class="irs-min">0</span><span class="irs-max">1</span><span class="irs-from">0</span><span class="irs-to">0</span><span class="irs-single">0</span></span><span class="irs-grid"></span><span class="irs-bar"></span>'),this.$cache.rs=this.$cache.cont.find(".irs"),this.$cache.min=this.$cache.cont.find(".irs-min"),this.$cache.max=this.$cache.cont.find(".irs-max"),this.$cache.from=this.$cache.cont.find(".irs-from"),this.$cache.to=this.$cache.cont.find(".irs-to"),this.$cache.single=this.$cache.cont.find(".irs-single"),this.$cache.bar=this.$cache.cont.find(".irs-bar"),this.$cache.line=this.$cache.cont.find(".irs-line"),this.$cache.grid=this.$cache.cont.find(".irs-grid"),"single"===this.options.type?(this.$cache.cont.append('<span class="irs-bar-edge"></span><span class="irs-shadow shadow-single"></span><span class="irs-slider single"></span>'),this.$cache.edge=this.$cache.cont.find(".irs-bar-edge"),this.$cache.s_single=this.$cache.cont.find(".single"),this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.shad_single=this.$cache.cont.find(".shadow-single")):(this.$cache.cont.append('<span class="irs-shadow shadow-from"></span><span class="irs-shadow shadow-to"></span><span class="irs-slider from"></span><span class="irs-slider to"></span>'),this.$cache.s_from=this.$cache.cont.find(".from"),this.$cache.s_to=this.$cache.cont.find(".to"),this.$cache.shad_from=this.$cache.cont.find(".shadow-from"),this.$cache.shad_to=this.$cache.cont.find(".shadow-to"),this.setTopHandler()),this.options.hide_from_to&&(this.$cache.from[0].style.display="none",this.$cache.to[0].style.display="none",this.$cache.single[0].style.display="none"),this.appendGrid(),this.options.disable?(this.appendDisableMask(),this.$cache.input[0].disabled=!0):(this.$cache.cont.removeClass("irs-disabled"),this.$cache.input[0].disabled=!1,this.bindEvents()),this.options.drag_interval&&(this.$cache.bar[0].style.cursor="ew-resize")},setTopHandler:function(){var t=this.options.min,e=this.options.max,i=this.options.from,s=this.options.to;i>t&&s===e?this.$cache.s_from.addClass("type_last"):s<e&&this.$cache.s_to.addClass("type_last")},changeLevel:function(t){switch(t){case"single":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_single_fake);break;case"from":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_from_fake),this.$cache.s_from.addClass("state_hover"),this.$cache.s_from.addClass("type_last"),this.$cache.s_to.removeClass("type_last");break;case"to":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_to_fake),this.$cache.s_to.addClass("state_hover"),this.$cache.s_to.addClass("type_last"),this.$cache.s_from.removeClass("type_last");break;case"both":this.coords.p_gap_left=this.toFixed(this.coords.p_pointer-this.coords.p_from_fake),this.coords.p_gap_right=this.toFixed(this.coords.p_to_fake-this.coords.p_pointer),this.$cache.s_to.removeClass("type_last"),this.$cache.s_from.removeClass("type_last")}},appendDisableMask:function(){this.$cache.cont.append('<span class="irs-disable-mask"></span>'),this.$cache.cont.addClass("irs-disabled")},remove:function(){this.$cache.cont.remove(),this.$cache.cont=null,this.$cache.line.off("keydown.irs_"+this.plugin_count),this.$cache.body.off("touchmove.irs_"+this.plugin_count),this.$cache.body.off("mousemove.irs_"+this.plugin_count),this.$cache.win.off("touchend.irs_"+this.plugin_count),this.$cache.win.off("mouseup.irs_"+this.plugin_count),r&&(this.$cache.body.off("mouseup.irs_"+this.plugin_count),this.$cache.body.off("mouseleave.irs_"+this.plugin_count)),this.$cache.grid_labels=[],this.coords.big=[],this.coords.big_w=[],this.coords.big_p=[],this.coords.big_x=[],cancelAnimationFrame(this.raf_id)},bindEvents:function(){this.no_diapason||(this.$cache.body.on("touchmove.irs_"+this.plugin_count,this.pointerMove.bind(this)),this.$cache.body.on("mousemove.irs_"+this.plugin_count,this.pointerMove.bind(this)),this.$cache.win.on("touchend.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.win.on("mouseup.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.line.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.line.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.options.drag_interval&&"double"===this.options.type?(this.$cache.bar.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"both")),this.$cache.bar.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"both"))):(this.$cache.bar.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.bar.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"))),"single"===this.options.type?(this.$cache.single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.s_single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.shad_single.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.s_single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.edge.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_single.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"))):(this.$cache.single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,null)),this.$cache.single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,null)),this.$cache.from.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.s_from.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.to.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.s_to.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.shad_from.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_to.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.from.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.s_from.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.to.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.s_to.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.shad_from.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_to.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"))),this.options.keyboard&&this.$cache.line.on("keydown.irs_"+this.plugin_count,this.key.bind(this,"keyboard")),r&&(this.$cache.body.on("mouseup.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.body.on("mouseleave.irs_"+this.plugin_count,this.pointerUp.bind(this))))},pointerMove:function(t){if(this.dragging){var e=t.pageX||t.originalEvent.touches&&t.originalEvent.touches[0].pageX;this.coords.x_pointer=e-this.coords.x_gap,this.calc()}},pointerUp:function(e){this.current_plugin===this.plugin_count&&this.is_active&&(this.is_active=!1,this.$cache.cont.find(".state_hover").removeClass("state_hover"),this.force_redraw=!0,r&&t("*").prop("unselectable",!1),this.updateScene(),this.restoreOriginalMinInterval(),(t.contains(this.$cache.cont[0],e.target)||this.dragging)&&this.callOnFinish(),this.dragging=!1)},pointerDown:function(e,i){i.preventDefault();var s=i.pageX||i.originalEvent.touches&&i.originalEvent.touches[0].pageX;2!==i.button&&("both"===e&&this.setTempMinInterval(),e||(e=this.target||"from"),this.current_plugin=this.plugin_count,this.target=e,this.is_active=!0,this.dragging=!0,this.coords.x_gap=this.$cache.rs.offset().left,this.coords.x_pointer=s-this.coords.x_gap,this.calcPointerPercent(),this.changeLevel(e),r&&t("*").prop("unselectable",!0),this.$cache.line.trigger("focus"),this.updateScene())},pointerClick:function(t,e){e.preventDefault();var i=e.pageX||e.originalEvent.touches&&e.originalEvent.touches[0].pageX;2!==e.button&&(this.current_plugin=this.plugin_count,this.target=t,this.is_click=!0,
this.coords.x_gap=this.$cache.rs.offset().left,this.coords.x_pointer=+(i-this.coords.x_gap).toFixed(),this.force_redraw=!0,this.calc(),this.$cache.line.trigger("focus"))},key:function(t,e){if(!(this.current_plugin!==this.plugin_count||e.altKey||e.ctrlKey||e.shiftKey||e.metaKey)){switch(e.which){case 83:case 65:case 40:case 37:e.preventDefault(),this.moveByKey(!1);break;case 87:case 68:case 38:case 39:e.preventDefault(),this.moveByKey(!0)}return!0}},moveByKey:function(t){var e=this.coords.p_pointer;t?e+=this.options.keyboard_step:e-=this.options.keyboard_step,this.coords.x_pointer=this.toFixed(this.coords.w_rs/100*e),this.is_key=!0,this.calc()},setMinMax:function(){if(this.options){if(this.options.hide_min_max)return this.$cache.min[0].style.display="none",void(this.$cache.max[0].style.display="none");this.options.values.length?(this.$cache.min.html(this.decorate(this.options.p_values[this.options.min])),this.$cache.max.html(this.decorate(this.options.p_values[this.options.max]))):(this.$cache.min.html(this.decorate(this._prettify(this.options.min),this.options.min)),this.$cache.max.html(this.decorate(this._prettify(this.options.max),this.options.max))),this.labels.w_min=this.$cache.min.outerWidth(!1),this.labels.w_max=this.$cache.max.outerWidth(!1)}},setTempMinInterval:function(){var t=this.result.to-this.result.from;null===this.old_min_interval&&(this.old_min_interval=this.options.min_interval),this.options.min_interval=t},restoreOriginalMinInterval:function(){null!==this.old_min_interval&&(this.options.min_interval=this.old_min_interval,this.old_min_interval=null)},calc:function(t){if(this.options&&(this.calc_count++,(10===this.calc_count||t)&&(this.calc_count=0,this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.calcHandlePercent()),this.coords.w_rs)){this.calcPointerPercent();var e=this.getHandleX();switch("both"===this.target&&(this.coords.p_gap=0,e=this.getHandleX()),"click"===this.target&&(this.coords.p_gap=this.coords.p_handle/2,e=this.getHandleX(),this.options.drag_interval?this.target="both_one":this.target=this.chooseHandle(e)),this.target){case"base":var i=(this.options.max-this.options.min)/100,s=(this.result.from-this.options.min)/i,o=(this.result.to-this.options.min)/i;this.coords.p_single_real=this.toFixed(s),this.coords.p_from_real=this.toFixed(s),this.coords.p_to_real=this.toFixed(o),this.coords.p_single_real=this.checkDiapason(this.coords.p_single_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_single_fake=this.convertToFakePercent(this.coords.p_single_real),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real),this.target=null;break;case"single":if(this.options.from_fixed)break;this.coords.p_single_real=this.convertToRealPercent(e),this.coords.p_single_real=this.calcWithStep(this.coords.p_single_real),this.coords.p_single_real=this.checkDiapason(this.coords.p_single_real,this.options.from_min,this.options.from_max),this.coords.p_single_fake=this.convertToFakePercent(this.coords.p_single_real);break;case"from":if(this.options.from_fixed)break;this.coords.p_from_real=this.convertToRealPercent(e),this.coords.p_from_real=this.calcWithStep(this.coords.p_from_real),this.coords.p_from_real>this.coords.p_to_real&&(this.coords.p_from_real=this.coords.p_to_real),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkMinInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_real=this.checkMaxInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real);break;case"to":if(this.options.to_fixed)break;this.coords.p_to_real=this.convertToRealPercent(e),this.coords.p_to_real=this.calcWithStep(this.coords.p_to_real),this.coords.p_to_real<this.coords.p_from_real&&(this.coords.p_to_real=this.coords.p_from_real),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_real=this.checkMinInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_real=this.checkMaxInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real);break;case"both":if(this.options.from_fixed||this.options.to_fixed)break;e=this.toFixed(e+.001*this.coords.p_handle),this.coords.p_from_real=this.convertToRealPercent(e)-this.coords.p_gap_left,this.coords.p_from_real=this.calcWithStep(this.coords.p_from_real),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkMinInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_real=this.convertToRealPercent(e)+this.coords.p_gap_right,this.coords.p_to_real=this.calcWithStep(this.coords.p_to_real),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_real=this.checkMinInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real);break;case"both_one":if(this.options.from_fixed||this.options.to_fixed)break;var n=this.convertToRealPercent(e),r=this.result.from_percent,a=this.result.to_percent,h=a-r,c=h/2,l=n-c,d=n+c;l<0&&(l=0,d=l+h),d>100&&(d=100,l=d-h),this.coords.p_from_real=this.calcWithStep(l),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_real=this.calcWithStep(d),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real)}"single"===this.options.type?(this.coords.p_bar_x=this.coords.p_handle/2,this.coords.p_bar_w=this.coords.p_single_fake,this.result.from_percent=this.coords.p_single_real,this.result.from=this.convertToValue(this.coords.p_single_real),this.options.values.length&&(this.result.from_value=this.options.values[this.result.from])):(this.coords.p_bar_x=this.toFixed(this.coords.p_from_fake+this.coords.p_handle/2),this.coords.p_bar_w=this.toFixed(this.coords.p_to_fake-this.coords.p_from_fake),this.result.from_percent=this.coords.p_from_real,this.result.from=this.convertToValue(this.coords.p_from_real),this.result.to_percent=this.coords.p_to_real,this.result.to=this.convertToValue(this.coords.p_to_real),this.options.values.length&&(this.result.from_value=this.options.values[this.result.from],this.result.to_value=this.options.values[this.result.to])),this.calcMinMax(),this.calcLabels()}},calcPointerPercent:function(){if(!this.coords.w_rs)return void(this.coords.p_pointer=0);this.coords.x_pointer<0||isNaN(this.coords.x_pointer)?this.coords.x_pointer=0:this.coords.x_pointer>this.coords.w_rs&&(this.coords.x_pointer=this.coords.w_rs),this.coords.p_pointer=this.toFixed(this.coords.x_pointer/this.coords.w_rs*100)},convertToRealPercent:function(t){return t/(100-this.coords.p_handle)*100},convertToFakePercent:function(t){return t/100*(100-this.coords.p_handle)},getHandleX:function(){var t=100-this.coords.p_handle,e=this.toFixed(this.coords.p_pointer-this.coords.p_gap);return e<0?e=0:e>t&&(e=t),e},calcHandlePercent:function(){"single"===this.options.type?this.coords.w_handle=this.$cache.s_single.outerWidth(!1):this.coords.w_handle=this.$cache.s_from.outerWidth(!1),this.coords.p_handle=this.toFixed(this.coords.w_handle/this.coords.w_rs*100)},chooseHandle:function(t){return"single"===this.options.type?"single":t>=this.coords.p_from_real+(this.coords.p_to_real-this.coords.p_from_real)/2?this.options.to_fixed?"from":"to":this.options.from_fixed?"to":"from"},calcMinMax:function(){this.coords.w_rs&&(this.labels.p_min=this.labels.w_min/this.coords.w_rs*100,this.labels.p_max=this.labels.w_max/this.coords.w_rs*100)},calcLabels:function(){this.coords.w_rs&&!this.options.hide_from_to&&("single"===this.options.type?(this.labels.w_single=this.$cache.single.outerWidth(!1),this.labels.p_single_fake=this.labels.w_single/this.coords.w_rs*100,this.labels.p_single_left=this.coords.p_single_fake+this.coords.p_handle/2-this.labels.p_single_fake/2,this.labels.p_single_left=this.checkEdges(this.labels.p_single_left,this.labels.p_single_fake)):(this.labels.w_from=this.$cache.from.outerWidth(!1),this.labels.p_from_fake=this.labels.w_from/this.coords.w_rs*100,this.labels.p_from_left=this.coords.p_from_fake+this.coords.p_handle/2-this.labels.p_from_fake/2,this.labels.p_from_left=this.toFixed(this.labels.p_from_left),this.labels.p_from_left=this.checkEdges(this.labels.p_from_left,this.labels.p_from_fake),this.labels.w_to=this.$cache.to.outerWidth(!1),this.labels.p_to_fake=this.labels.w_to/this.coords.w_rs*100,this.labels.p_to_left=this.coords.p_to_fake+this.coords.p_handle/2-this.labels.p_to_fake/2,this.labels.p_to_left=this.toFixed(this.labels.p_to_left),this.labels.p_to_left=this.checkEdges(this.labels.p_to_left,this.labels.p_to_fake),this.labels.w_single=this.$cache.single.outerWidth(!1),this.labels.p_single_fake=this.labels.w_single/this.coords.w_rs*100,this.labels.p_single_left=(this.labels.p_from_left+this.labels.p_to_left+this.labels.p_to_fake)/2-this.labels.p_single_fake/2,this.labels.p_single_left=this.toFixed(this.labels.p_single_left),this.labels.p_single_left=this.checkEdges(this.labels.p_single_left,this.labels.p_single_fake)))},updateScene:function(){this.raf_id&&(cancelAnimationFrame(this.raf_id),this.raf_id=null),clearTimeout(this.update_tm),this.update_tm=null,this.options&&(this.drawHandles(),this.is_active?this.raf_id=requestAnimationFrame(this.updateScene.bind(this)):this.update_tm=setTimeout(this.updateScene.bind(this),300))},drawHandles:function(){this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.coords.w_rs&&(this.coords.w_rs!==this.coords.w_rs_old&&(this.target="base",this.is_resize=!0),(this.coords.w_rs!==this.coords.w_rs_old||this.force_redraw)&&(this.setMinMax(),this.calc(!0),this.drawLabels(),this.options.grid&&(this.calcGridMargin(),this.calcGridLabels()),this.force_redraw=!0,this.coords.w_rs_old=this.coords.w_rs,this.drawShadow()),this.coords.w_rs&&(this.dragging||this.force_redraw||this.is_key)&&((this.old_from!==this.result.from||this.old_to!==this.result.to||this.force_redraw||this.is_key)&&(this.drawLabels(),this.$cache.bar[0].style.left=this.coords.p_bar_x+"%",this.$cache.bar[0].style.width=this.coords.p_bar_w+"%","single"===this.options.type?(this.$cache.s_single[0].style.left=this.coords.p_single_fake+"%",this.$cache.single[0].style.left=this.labels.p_single_left+"%"):(this.$cache.s_from[0].style.left=this.coords.p_from_fake+"%",this.$cache.s_to[0].style.left=this.coords.p_to_fake+"%",(this.old_from!==this.result.from||this.force_redraw)&&(this.$cache.from[0].style.left=this.labels.p_from_left+"%"),(this.old_to!==this.result.to||this.force_redraw)&&(this.$cache.to[0].style.left=this.labels.p_to_left+"%"),this.$cache.single[0].style.left=this.labels.p_single_left+"%"),this.writeToInput(),this.old_from===this.result.from&&this.old_to===this.result.to||this.is_start||(this.$cache.input.trigger("change"),this.$cache.input.trigger("input")),this.old_from=this.result.from,this.old_to=this.result.to,this.is_resize||this.is_update||this.is_start||this.is_finish||this.callOnChange(),(this.is_key||this.is_click)&&(this.is_key=!1,this.is_click=!1,this.callOnFinish()),this.is_update=!1,this.is_resize=!1,this.is_finish=!1),this.is_start=!1,this.is_key=!1,this.is_click=!1,this.force_redraw=!1))},drawLabels:function(){if(this.options){var t,e,i,s=this.options.values.length,o=this.options.p_values;if(!this.options.hide_from_to)if("single"===this.options.type)s?(t=this.decorate(o[this.result.from]),this.$cache.single.html(t)):(t=this.decorate(this._prettify(this.result.from),this.result.from),this.$cache.single.html(t)),this.calcLabels(),this.labels.p_single_left<this.labels.p_min+1?this.$cache.min[0].style.visibility="hidden":this.$cache.min[0].style.visibility="visible",this.labels.p_single_left+this.labels.p_single_fake>100-this.labels.p_max-1?this.$cache.max[0].style.visibility="hidden":this.$cache.max[0].style.visibility="visible";else{s?(this.options.decorate_both?(t=this.decorate(o[this.result.from]),t+=this.options.values_separator,t+=this.decorate(o[this.result.to])):t=this.decorate(o[this.result.from]+this.options.values_separator+o[this.result.to]),e=this.decorate(o[this.result.from]),i=this.decorate(o[this.result.to]),this.$cache.single.html(t),this.$cache.from.html(e),this.$cache.to.html(i)):(this.options.decorate_both?(t=this.decorate(this._prettify(this.result.from),this.result.from),t+=this.options.values_separator,t+=this.decorate(this._prettify(this.result.to),this.result.to)):t=this.decorate(this._prettify(this.result.from)+this.options.values_separator+this._prettify(this.result.to),this.result.to),e=this.decorate(this._prettify(this.result.from),this.result.from),i=this.decorate(this._prettify(this.result.to),this.result.to),this.$cache.single.html(t),this.$cache.from.html(e),this.$cache.to.html(i)),this.calcLabels();var n=Math.min(this.labels.p_single_left,this.labels.p_from_left),r=this.labels.p_single_left+this.labels.p_single_fake,a=this.labels.p_to_left+this.labels.p_to_fake,h=Math.max(r,a);this.labels.p_from_left+this.labels.p_from_fake>=this.labels.p_to_left?(this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.single[0].style.visibility="visible",this.result.from===this.result.to?("from"===this.target?this.$cache.from[0].style.visibility="visible":"to"===this.target?this.$cache.to[0].style.visibility="visible":this.target||(this.$cache.from[0].style.visibility="visible"),this.$cache.single[0].style.visibility="hidden",h=a):(this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.single[0].style.visibility="visible",h=Math.max(r,a))):(this.$cache.from[0].style.visibility="visible",this.$cache.to[0].style.visibility="visible",this.$cache.single[0].style.visibility="hidden"),n<this.labels.p_min+1?this.$cache.min[0].style.visibility="hidden":this.$cache.min[0].style.visibility="visible",h>100-this.labels.p_max-1?this.$cache.max[0].style.visibility="hidden":this.$cache.max[0].style.visibility="visible"}}},drawShadow:function(){var t,e,i,s,o=this.options,n=this.$cache,r="number"==typeof o.from_min&&!isNaN(o.from_min),a="number"==typeof o.from_max&&!isNaN(o.from_max),h="number"==typeof o.to_min&&!isNaN(o.to_min),c="number"==typeof o.to_max&&!isNaN(o.to_max);"single"===o.type?o.from_shadow&&(r||a)?(t=this.convertToPercent(r?o.from_min:o.min),e=this.convertToPercent(a?o.from_max:o.max)-t,t=this.toFixed(t-this.coords.p_handle/100*t),e=this.toFixed(e-this.coords.p_handle/100*e),t+=this.coords.p_handle/2,n.shad_single[0].style.display="block",n.shad_single[0].style.left=t+"%",n.shad_single[0].style.width=e+"%"):n.shad_single[0].style.display="none":(o.from_shadow&&(r||a)?(t=this.convertToPercent(r?o.from_min:o.min),e=this.convertToPercent(a?o.from_max:o.max)-t,t=this.toFixed(t-this.coords.p_handle/100*t),e=this.toFixed(e-this.coords.p_handle/100*e),t+=this.coords.p_handle/2,n.shad_from[0].style.display="block",n.shad_from[0].style.left=t+"%",n.shad_from[0].style.width=e+"%"):n.shad_from[0].style.display="none",o.to_shadow&&(h||c)?(i=this.convertToPercent(h?o.to_min:o.min),s=this.convertToPercent(c?o.to_max:o.max)-i,i=this.toFixed(i-this.coords.p_handle/100*i),s=this.toFixed(s-this.coords.p_handle/100*s),i+=this.coords.p_handle/2,n.shad_to[0].style.display="block",n.shad_to[0].style.left=i+"%",n.shad_to[0].style.width=s+"%"):n.shad_to[0].style.display="none")},writeToInput:function(){"single"===this.options.type?(this.options.values.length?this.$cache.input.prop("value",this.result.from_value):this.$cache.input.prop("value",this.result.from),this.$cache.input.data("from",this.result.from)):(this.options.values.length?this.$cache.input.prop("value",this.result.from_value+this.options.input_values_separator+this.result.to_value):this.$cache.input.prop("value",this.result.from+this.options.input_values_separator+this.result.to),this.$cache.input.data("from",this.result.from),this.$cache.input.data("to",this.result.to))},callOnStart:function(){this.writeToInput(),this.options.onStart&&"function"==typeof this.options.onStart&&this.options.onStart(this.result)},callOnChange:function(){this.writeToInput(),this.options.onChange&&"function"==typeof this.options.onChange&&this.options.onChange(this.result)},callOnFinish:function(){this.writeToInput(),this.options.onFinish&&"function"==typeof this.options.onFinish&&this.options.onFinish(this.result)},callOnUpdate:function(){this.writeToInput(),this.options.onUpdate&&"function"==typeof this.options.onUpdate&&this.options.onUpdate(this.result)},toggleInput:function(){this.$cache.input.toggleClass("irs-hidden-input")},convertToPercent:function(t,e){var i,s,o=this.options.max-this.options.min,n=o/100;return o?(i=e?t:t-this.options.min,s=i/n,this.toFixed(s)):(this.no_diapason=!0,0)},convertToValue:function(t){var e,i,s=this.options.min,o=this.options.max,n=s.toString().split(".")[1],r=o.toString().split(".")[1],a=0,h=0;if(0===t)return this.options.min;if(100===t)return this.options.max;n&&(e=n.length,a=e),r&&(i=r.length,a=i),e&&i&&(a=e>=i?e:i),s<0&&(h=Math.abs(s),s=+(s+h).toFixed(a),o=+(o+h).toFixed(a));var c,l=(o-s)/100*t+s,d=this.options.step.toString().split(".")[1];return d?l=+l.toFixed(d.length):(l/=this.options.step,l*=this.options.step,l=+l.toFixed(0)),h&&(l-=h),c=d?+l.toFixed(d.length):this.toFixed(l),c<this.options.min?c=this.options.min:c>this.options.max&&(c=this.options.max),c},calcWithStep:function(t){var e=Math.round(t/this.coords.p_step)*this.coords.p_step;return e>100&&(e=100),100===t&&(e=100),this.toFixed(e)},checkMinInterval:function(t,e,i){var s,o,n=this.options;return n.min_interval?(s=this.convertToValue(t),o=this.convertToValue(e),"from"===i?o-s<n.min_interval&&(s=o-n.min_interval):s-o<n.min_interval&&(s=o+n.min_interval),this.convertToPercent(s)):t},checkMaxInterval:function(t,e,i){var s,o,n=this.options;return n.max_interval?(s=this.convertToValue(t),o=this.convertToValue(e),"from"===i?o-s>n.max_interval&&(s=o-n.max_interval):s-o>n.max_interval&&(s=o+n.max_interval),this.convertToPercent(s)):t},checkDiapason:function(t,e,i){var s=this.convertToValue(t),o=this.options;return"number"!=typeof e&&(e=o.min),"number"!=typeof i&&(i=o.max),s<e&&(s=e),s>i&&(s=i),this.convertToPercent(s)},toFixed:function(t){return+(t=t.toFixed(20))},_prettify:function(t){return this.options.prettify_enabled?this.options.prettify&&"function"==typeof this.options.prettify?this.options.prettify(t):this.prettify(t):t},prettify:function(t){return t.toString().replace(/(\d{1,3}(?=(?:\d\d\d)+(?!\d)))/g,"$1"+this.options.prettify_separator)},checkEdges:function(t,e){return this.options.force_edges?(t<0?t=0:t>100-e&&(t=100-e),this.toFixed(t)):this.toFixed(t)},validate:function(){var t,e,i=this.options,s=this.result,o=i.values,n=o.length;if("string"==typeof i.min&&(i.min=+i.min),"string"==typeof i.max&&(i.max=+i.max),"string"==typeof i.from&&(i.from=+i.from),"string"==typeof i.to&&(i.to=+i.to),"string"==typeof i.step&&(i.step=+i.step),"string"==typeof i.from_min&&(i.from_min=+i.from_min),"string"==typeof i.from_max&&(i.from_max=+i.from_max),"string"==typeof i.to_min&&(i.to_min=+i.to_min),"string"==typeof i.to_max&&(i.to_max=+i.to_max),"string"==typeof i.keyboard_step&&(i.keyboard_step=+i.keyboard_step),"string"==typeof i.grid_num&&(i.grid_num=+i.grid_num),i.max<i.min&&(i.max=i.min),n)for(i.p_values=[],i.min=0,i.max=n-1,i.step=1,i.grid_num=i.max,i.grid_snap=!0,e=0;e<n;e++)t=+o[e],isNaN(t)?t=o[e]:(o[e]=t,t=this._prettify(t)),i.p_values.push(t);("number"!=typeof i.from||isNaN(i.from))&&(i.from=i.min),("number"!=typeof i.to||isNaN(i.to))&&(i.to=i.max),"single"===i.type?(i.from<i.min&&(i.from=i.min),i.from>i.max&&(i.from=i.max)):(i.from<i.min&&(i.from=i.min),i.from>i.max&&(i.from=i.max),i.to<i.min&&(i.to=i.min),i.to>i.max&&(i.to=i.max),this.update_check.from&&(this.update_check.from!==i.from&&i.from>i.to&&(i.from=i.to),this.update_check.to!==i.to&&i.to<i.from&&(i.to=i.from)),i.from>i.to&&(i.from=i.to),i.to<i.from&&(i.to=i.from)),("number"!=typeof i.step||isNaN(i.step)||!i.step||i.step<0)&&(i.step=1),("number"!=typeof i.keyboard_step||isNaN(i.keyboard_step)||!i.keyboard_step||i.keyboard_step<0)&&(i.keyboard_step=5),"number"==typeof i.from_min&&i.from<i.from_min&&(i.from=i.from_min),"number"==typeof i.from_max&&i.from>i.from_max&&(i.from=i.from_max),"number"==typeof i.to_min&&i.to<i.to_min&&(i.to=i.to_min),"number"==typeof i.to_max&&i.from>i.to_max&&(i.to=i.to_max),s&&(s.min!==i.min&&(s.min=i.min),s.max!==i.max&&(s.max=i.max),(s.from<s.min||s.from>s.max)&&(s.from=i.from),(s.to<s.min||s.to>s.max)&&(s.to=i.to)),("number"!=typeof i.min_interval||isNaN(i.min_interval)||!i.min_interval||i.min_interval<0)&&(i.min_interval=0),("number"!=typeof i.max_interval||isNaN(i.max_interval)||!i.max_interval||i.max_interval<0)&&(i.max_interval=0),i.min_interval&&i.min_interval>i.max-i.min&&(i.min_interval=i.max-i.min),i.max_interval&&i.max_interval>i.max-i.min&&(i.max_interval=i.max-i.min)},decorate:function(t,e){var i="",s=this.options;return s.prefix&&(i+=s.prefix),i+=t,s.max_postfix&&(s.values.length&&t===s.p_values[s.max]?(i+=s.max_postfix,s.postfix&&(i+=" ")):e===s.max&&(i+=s.max_postfix,s.postfix&&(i+=" "))),s.postfix&&(i+=s.postfix),i},updateFrom:function(){this.result.from=this.options.from,this.result.from_percent=this.convertToPercent(this.result.from),this.options.values&&(this.result.from_value=this.options.values[this.result.from])},updateTo:function(){this.result.to=this.options.to,this.result.to_percent=this.convertToPercent(this.result.to),this.options.values&&(this.result.to_value=this.options.values[this.result.to])},updateResult:function(){this.result.min=this.options.min,this.result.max=this.options.max,this.updateFrom(),this.updateTo()},appendGrid:function(){if(this.options.grid){var t,e,i,s,o,n=this.options,r=n.max-n.min,a=n.grid_num,h=0,c=0,l=4,d=0,p="";for(this.calcGridMargin(),n.grid_snap?r>50?(a=50/n.step,h=this.toFixed(n.step/.5)):(a=r/n.step,h=this.toFixed(n.step/(r/100))):h=this.toFixed(100/a),a>4&&(l=3),a>7&&(l=2),a>14&&(l=1),a>28&&(l=0),t=0;t<a+1;t++){for(i=l,c=this.toFixed(h*t),c>100&&(c=100,(i-=2)<0&&(i=0)),this.coords.big[t]=c,s=(c-h*(t-1))/(i+1),e=1;e<=i&&0!==c;e++)d=this.toFixed(c-s*e),p+='<span class="irs-grid-pol small" style="left: '+d+'%"></span>';p+='<span class="irs-grid-pol" style="left: '+c+'%"></span>',o=this.convertToValue(c),o=n.values.length?n.p_values[o]:this._prettify(o),p+='<span class="irs-grid-text js-grid-text-'+t+'" style="left: '+c+'%">'+o+"</span>"}this.coords.big_num=Math.ceil(a+1),this.$cache.cont.addClass("irs-with-grid"),this.$cache.grid.html(p),this.cacheGridLabels()}},cacheGridLabels:function(){var t,e,i=this.coords.big_num;for(e=0;e<i;e++)t=this.$cache.grid.find(".js-grid-text-"+e),this.$cache.grid_labels.push(t);this.calcGridLabels()},calcGridLabels:function(){var t,e,i=[],s=[],o=this.coords.big_num;for(t=0;t<o;t++)this.coords.big_w[t]=this.$cache.grid_labels[t].outerWidth(!1),this.coords.big_p[t]=this.toFixed(this.coords.big_w[t]/this.coords.w_rs*100),this.coords.big_x[t]=this.toFixed(this.coords.big_p[t]/2),i[t]=this.toFixed(this.coords.big[t]-this.coords.big_x[t]),s[t]=this.toFixed(i[t]+this.coords.big_p[t]);for(this.options.force_edges&&(i[0]<-this.coords.grid_gap&&(i[0]=-this.coords.grid_gap,s[0]=this.toFixed(i[0]+this.coords.big_p[0]),this.coords.big_x[0]=this.coords.grid_gap),s[o-1]>100+this.coords.grid_gap&&(s[o-1]=100+this.coords.grid_gap,i[o-1]=this.toFixed(s[o-1]-this.coords.big_p[o-1]),this.coords.big_x[o-1]=this.toFixed(this.coords.big_p[o-1]-this.coords.grid_gap))),this.calcGridCollision(2,i,s),this.calcGridCollision(4,i,s),t=0;t<o;t++)e=this.$cache.grid_labels[t][0],this.coords.big_x[t]!==Number.POSITIVE_INFINITY&&(e.style.marginLeft=-this.coords.big_x[t]+"%")},calcGridCollision:function(t,e,i){var s,o,n,r=this.coords.big_num;for(s=0;s<r&&!((o=s+t/2)>=r);s+=t)n=this.$cache.grid_labels[o][0],i[s]<=e[o]?n.style.visibility="visible":n.style.visibility="hidden"},calcGridMargin:function(){this.options.grid_margin&&(this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.coords.w_rs&&("single"===this.options.type?this.coords.w_handle=this.$cache.s_single.outerWidth(!1):this.coords.w_handle=this.$cache.s_from.outerWidth(!1),this.coords.p_handle=this.toFixed(this.coords.w_handle/this.coords.w_rs*100),this.coords.grid_gap=this.toFixed(this.coords.p_handle/2-.1),this.$cache.grid[0].style.width=this.toFixed(100-this.coords.p_handle)+"%",this.$cache.grid[0].style.left=this.coords.grid_gap+"%"))},update:function(e){this.input&&(this.is_update=!0,this.options.from=this.result.from,this.options.to=this.result.to,this.update_check.from=this.result.from,this.update_check.to=this.result.to,this.options=t.extend(this.options,e),this.validate(),this.updateResult(e),this.toggleInput(),this.remove(),this.init(!0))},reset:function(){this.input&&(this.updateResult(),this.update())},destroy:function(){this.input&&(this.toggleInput(),this.$cache.input.prop("readonly",!1),t.data(this.input,"ionRangeSlider",null),this.remove(),this.input=null,this.options=null)}},t.fn.ionRangeSlider=function(e){return this.each(function(){t.data(this,"ionRangeSlider")||t.data(this,"ionRangeSlider",new a(this,e,n++))})},function(){for(var t=0,e=["ms","moz","webkit","o"],s=0;s<e.length&&!i.requestAnimationFrame;++s)i.requestAnimationFrame=i[e[s]+"RequestAnimationFrame"],i.cancelAnimationFrame=i[e[s]+"CancelAnimationFrame"]||i[e[s]+"CancelRequestAnimationFrame"];i.requestAnimationFrame||(i.requestAnimationFrame=function(e,s){var o=(new Date).getTime(),n=Math.max(0,16-(o-t)),r=i.setTimeout(function(){e(o+n)},n);return t=o+n,r}),i.cancelAnimationFrame||(i.cancelAnimationFrame=function(t){clearTimeout(t)})}()}),function(t,e,i,s){function o(e,i){this.settings=null,this.options=t.extend({},o.Defaults,i),this.$element=t(e),this._handlers={},this._plugins={},this._supress={},this._current=null,this._speed=null,this._coordinates=[],this._breakpoint=null,this._width=null,this._items=[],this._clones=[],this._mergers=[],this._widths=[],this._invalidated={},this._pipe=[],this._drag={time:null,target:null,pointer:null,stage:{start:null,current:null},direction:null},this._states={current:{},tags:{initializing:["busy"],animating:["busy"],dragging:["interacting"]}},t.each(["onResize","onThrottledResize"],t.proxy(function(e,i){this._handlers[i]=t.proxy(this[i],this)},this)),t.each(o.Plugins,t.proxy(function(t,e){this._plugins[t.charAt(0).toLowerCase()+t.slice(1)]=new e(this)},this)),t.each(o.Workers,t.proxy(function(e,i){this._pipe.push({filter:i.filter,run:t.proxy(i.run,this)})},this)),this.setup(),this.initialize()}o.Defaults={items:3,loop:!1,center:!1,rewind:!1,mouseDrag:!0,touchDrag:!0,pullDrag:!0,freeDrag:!1,margin:0,stagePadding:0,merge:!1,mergeFit:!0,autoWidth:!1,startPosition:0,rtl:!1,smartSpeed:250,fluidSpeed:!1,dragEndSpeed:!1,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:e,fallbackEasing:"swing",info:!1,nestedItemSelector:!1,itemElement:"div",stageElement:"div",refreshClass:"owl-refresh",loadedClass:"owl-loaded",loadingClass:"owl-loading",rtlClass:"owl-rtl",responsiveClass:"owl-responsive",dragClass:"owl-drag",itemClass:"owl-item",stageClass:"owl-stage",stageOuterClass:"owl-stage-outer",grabClass:"owl-grab"},o.Width={Default:"default",Inner:"inner",Outer:"outer"},o.Type={Event:"event",State:"state"},o.Plugins={},o.Workers=[{filter:["width","settings"],run:function(){this._width=this.$element.width()}},{filter:["width","items","settings"],run:function(t){t.current=this._items&&this._items[this.relative(this._current)]}},{filter:["items","settings"],run:function(){this.$stage.children(".cloned").remove()}},{filter:["width","items","settings"],run:function(t){var e=this.settings.margin||"",i=!this.settings.autoWidth,s=this.settings.rtl,o={width:"auto","margin-left":s?e:"","margin-right":s?"":e};!i&&this.$stage.children().css(o),t.css=o}},{filter:["width","items","settings"],run:function(t){var e=(this.width()/this.settings.items).toFixed(3)-this.settings.margin,i=null,s=this._items.length,o=!this.settings.autoWidth,n=[];for(t.items={merge:!1,width:e};s--;)i=this._mergers[s],i=this.settings.mergeFit&&Math.min(i,this.settings.items)||i,t.items.merge=i>1||t.items.merge,n[s]=o?e*i:this._items[s].width();this._widths=n}},{filter:["items","settings"],run:function(){var e=[],i=this._items,s=this.settings,o=Math.max(2*s.items,4),n=2*Math.ceil(i.length/2),r=s.loop&&i.length?s.rewind?o:Math.max(o,n):0,a="",h="";for(r/=2;r--;)e.push(this.normalize(e.length/2,!0)),a+=i[e[e.length-1]][0].outerHTML,e.push(this.normalize(i.length-1-(e.length-1)/2,!0)),h=i[e[e.length-1]][0].outerHTML+h;this._clones=e,t(a).addClass("cloned").appendTo(this.$stage),t(h).addClass("cloned").prependTo(this.$stage)}},{filter:["width","items","settings"],run:function(){for(var t=this.settings.rtl?1:-1,e=this._clones.length+this._items.length,i=-1,s=0,o=0,n=[];++i<e;)s=n[i-1]||0,o=this._widths[this.relative(i)]+this.settings.margin,n.push(s+o*t);this._coordinates=n}},{filter:["width","items","settings"],run:function(){var t=this.settings.stagePadding,e=this._coordinates,i={width:Math.ceil(Math.abs(e[e.length-1]))+2*t,"padding-left":t||"","padding-right":t||""};this.$stage.css(i)}},{filter:["width","items","settings"],run:function(t){var e=this._coordinates.length,i=!this.settings.autoWidth,s=this.$stage.children();if(i&&t.items.merge)for(;e--;)t.css.width=this._widths[this.relative(e)],s.eq(e).css(t.css);else i&&(t.css.width=t.items.width,s.css(t.css))}},{filter:["items"],run:function(){this._coordinates.length<1&&this.$stage.removeAttr("style")}},{filter:["width","items","settings"],run:function(t){t.current=t.current?this.$stage.children().index(t.current):0,t.current=Math.max(this.minimum(),Math.min(this.maximum(),t.current)),this.reset(t.current)}},{filter:["position"],run:function(){this.animate(this.coordinates(this._current))}},{filter:["width","position","items","settings"],run:function(){var t,e,i,s,o=this.settings.rtl?1:-1,n=2*this.settings.stagePadding,r=this.coordinates(this.current())+n,a=r+this.width()*o,h=[];for(i=0,s=this._coordinates.length;i<s;i++)t=this._coordinates[i-1]||0,e=Math.abs(this._coordinates[i])+n*o,(this.op(t,"<=",r)&&this.op(t,">",a)||this.op(e,"<",r)&&this.op(e,">",a))&&h.push(i);this.$stage.children(".active").removeClass("active"),this.$stage.children(":eq("+h.join("), :eq(")+")").addClass("active"),this.settings.center&&(this.$stage.children(".center").removeClass("center"),this.$stage.children().eq(this.current()).addClass("center"))}}],o.prototype.initialize=function(){if(this.enter("initializing"),this.trigger("initialize"),this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl),this.settings.autoWidth&&!this.is("pre-loading")){var e,i,s;e=this.$element.find("img"),i=this.settings.nestedItemSelector?"."+this.settings.nestedItemSelector:void 0,s=this.$element.children(i).width(),e.length&&s<=0&&this.preloadAutoWidthImages(e)}this.$element.addClass(this.options.loadingClass),this.$stage=t("<"+this.settings.stageElement+' class="'+this.settings.stageClass+'"/>').wrap('<div class="'+this.settings.stageOuterClass+'"/>'),this.$element.append(this.$stage.parent()),this.replace(this.$element.children().not(this.$stage.parent())),
this.$element.is(":visible")?this.refresh():this.invalidate("width"),this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass),this.registerEventHandlers(),this.leave("initializing"),this.trigger("initialized")},o.prototype.setup=function(){var e=this.viewport(),i=this.options.responsive,s=-1,o=null;i?(t.each(i,function(t){t<=e&&t>s&&(s=Number(t))}),o=t.extend({},this.options,i[s]),"function"==typeof o.stagePadding&&(o.stagePadding=o.stagePadding()),delete o.responsive,o.responsiveClass&&this.$element.attr("class",this.$element.attr("class").replace(new RegExp("("+this.options.responsiveClass+"-)\\S+\\s","g"),"$1"+s))):o=t.extend({},this.options),this.trigger("change",{property:{name:"settings",value:o}}),this._breakpoint=s,this.settings=o,this.invalidate("settings"),this.trigger("changed",{property:{name:"settings",value:this.settings}})},o.prototype.optionsLogic=function(){this.settings.autoWidth&&(this.settings.stagePadding=!1,this.settings.merge=!1)},o.prototype.prepare=function(e){var i=this.trigger("prepare",{content:e});return i.data||(i.data=t("<"+this.settings.itemElement+"/>").addClass(this.options.itemClass).append(e)),this.trigger("prepared",{content:i.data}),i.data},o.prototype.update=function(){for(var e=0,i=this._pipe.length,s=t.proxy(function(t){return this[t]},this._invalidated),o={};e<i;)(this._invalidated.all||t.grep(this._pipe[e].filter,s).length>0)&&this._pipe[e].run(o),e++;this._invalidated={},!this.is("valid")&&this.enter("valid")},o.prototype.width=function(t){switch(t=t||o.Width.Default){case o.Width.Inner:case o.Width.Outer:return this._width;default:return this._width-2*this.settings.stagePadding+this.settings.margin}},o.prototype.refresh=function(){this.enter("refreshing"),this.trigger("refresh"),this.setup(),this.optionsLogic(),this.$element.addClass(this.options.refreshClass),this.update(),this.$element.removeClass(this.options.refreshClass),this.leave("refreshing"),this.trigger("refreshed")},o.prototype.onThrottledResize=function(){e.clearTimeout(this.resizeTimer),this.resizeTimer=e.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate)},o.prototype.onResize=function(){return!!this._items.length&&(this._width!==this.$element.width()&&(!!this.$element.is(":visible")&&(this.enter("resizing"),this.trigger("resize").isDefaultPrevented()?(this.leave("resizing"),!1):(this.invalidate("width"),this.refresh(),this.leave("resizing"),void this.trigger("resized")))))},o.prototype.registerEventHandlers=function(){t.support.transition&&this.$stage.on(t.support.transition.end+".owl.core",t.proxy(this.onTransitionEnd,this)),!1!==this.settings.responsive&&this.on(e,"resize",this._handlers.onThrottledResize),this.settings.mouseDrag&&(this.$element.addClass(this.options.dragClass),this.$stage.on("mousedown.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("dragstart.owl.core selectstart.owl.core",function(){return!1})),this.settings.touchDrag&&(this.$stage.on("touchstart.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("touchcancel.owl.core",t.proxy(this.onDragEnd,this)))},o.prototype.onDragStart=function(e){var s=null;3!==e.which&&(t.support.transform?(s=this.$stage.css("transform").replace(/.*\(|\)| /g,"").split(","),s={x:s[16===s.length?12:4],y:s[16===s.length?13:5]}):(s=this.$stage.position(),s={x:this.settings.rtl?s.left+this.$stage.width()-this.width()+this.settings.margin:s.left,y:s.top}),this.is("animating")&&(t.support.transform?this.animate(s.x):this.$stage.stop(),this.invalidate("position")),this.$element.toggleClass(this.options.grabClass,"mousedown"===e.type),this.speed(0),this._drag.time=(new Date).getTime(),this._drag.target=t(e.target),this._drag.stage.start=s,this._drag.stage.current=s,this._drag.pointer=this.pointer(e),t(i).on("mouseup.owl.core touchend.owl.core",t.proxy(this.onDragEnd,this)),t(i).one("mousemove.owl.core touchmove.owl.core",t.proxy(function(e){var s=this.difference(this._drag.pointer,this.pointer(e));t(i).on("mousemove.owl.core touchmove.owl.core",t.proxy(this.onDragMove,this)),Math.abs(s.x)<Math.abs(s.y)&&this.is("valid")||(e.preventDefault(),this.enter("dragging"),this.trigger("drag"))},this)))},o.prototype.onDragMove=function(t){var e=null,i=null,s=null,o=this.difference(this._drag.pointer,this.pointer(t)),n=this.difference(this._drag.stage.start,o);this.is("dragging")&&(t.preventDefault(),this.settings.loop?(e=this.coordinates(this.minimum()),i=this.coordinates(this.maximum()+1)-e,n.x=((n.x-e)%i+i)%i+e):(e=this.settings.rtl?this.coordinates(this.maximum()):this.coordinates(this.minimum()),i=this.settings.rtl?this.coordinates(this.minimum()):this.coordinates(this.maximum()),s=this.settings.pullDrag?-1*o.x/5:0,n.x=Math.max(Math.min(n.x,e+s),i+s)),this._drag.stage.current=n,this.animate(n.x))},o.prototype.onDragEnd=function(e){var s=this.difference(this._drag.pointer,this.pointer(e)),o=this._drag.stage.current,n=s.x>0^this.settings.rtl?"left":"right";t(i).off(".owl.core"),this.$element.removeClass(this.options.grabClass),(0!==s.x&&this.is("dragging")||!this.is("valid"))&&(this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed),this.current(this.closest(o.x,0!==s.x?n:this._drag.direction)),this.invalidate("position"),this.update(),this._drag.direction=n,(Math.abs(s.x)>3||(new Date).getTime()-this._drag.time>300)&&this._drag.target.one("click.owl.core",function(){return!1})),this.is("dragging")&&(this.leave("dragging"),this.trigger("dragged"))},o.prototype.closest=function(e,i){var s=-1,o=this.width(),n=this.coordinates();return this.settings.freeDrag||t.each(n,t.proxy(function(t,r){return"left"===i&&e>r-30&&e<r+30?s=t:"right"===i&&e>r-o-30&&e<r-o+30?s=t+1:this.op(e,"<",r)&&this.op(e,">",n[t+1]||r-o)&&(s="left"===i?t+1:t),-1===s},this)),this.settings.loop||(this.op(e,">",n[this.minimum()])?s=e=this.minimum():this.op(e,"<",n[this.maximum()])&&(s=e=this.maximum())),s},o.prototype.animate=function(e){var i=this.speed()>0;this.is("animating")&&this.onTransitionEnd(),i&&(this.enter("animating"),this.trigger("translate")),t.support.transform3d&&t.support.transition?this.$stage.css({transform:"translate3d("+e+"px,0px,0px)",transition:this.speed()/1e3+"s"}):i?this.$stage.animate({left:e+"px"},this.speed(),this.settings.fallbackEasing,t.proxy(this.onTransitionEnd,this)):this.$stage.css({left:e+"px"})},o.prototype.is=function(t){return this._states.current[t]&&this._states.current[t]>0},o.prototype.current=function(t){if(void 0===t)return this._current;if(0!==this._items.length){if(t=this.normalize(t),this._current!==t){var e=this.trigger("change",{property:{name:"position",value:t}});void 0!==e.data&&(t=this.normalize(e.data)),this._current=t,this.invalidate("position"),this.trigger("changed",{property:{name:"position",value:this._current}})}return this._current}},o.prototype.invalidate=function(e){return"string"===t.type(e)&&(this._invalidated[e]=!0,this.is("valid")&&this.leave("valid")),t.map(this._invalidated,function(t,e){return e})},o.prototype.reset=function(t){void 0!==(t=this.normalize(t))&&(this._speed=0,this._current=t,this.suppress(["translate","translated"]),this.animate(this.coordinates(t)),this.release(["translate","translated"]))},o.prototype.normalize=function(t,e){var i=this._items.length,s=e?0:this._clones.length;return!this.isNumeric(t)||i<1?t=void 0:(t<0||t>=i+s)&&(t=((t-s/2)%i+i)%i+s/2),t},o.prototype.relative=function(t){return t-=this._clones.length/2,this.normalize(t,!0)},o.prototype.maximum=function(t){var e,i,s,o=this.settings,n=this._coordinates.length;if(o.loop)n=this._clones.length/2+this._items.length-1;else if(o.autoWidth||o.merge){for(e=this._items.length,i=this._items[--e].width(),s=this.$element.width();e--&&!((i+=this._items[e].width()+this.settings.margin)>s););n=e+1}else n=o.center?this._items.length-1:this._items.length-o.items;return t&&(n-=this._clones.length/2),Math.max(n,0)},o.prototype.minimum=function(t){return t?0:this._clones.length/2},o.prototype.items=function(t){return void 0===t?this._items.slice():(t=this.normalize(t,!0),this._items[t])},o.prototype.mergers=function(t){return void 0===t?this._mergers.slice():(t=this.normalize(t,!0),this._mergers[t])},o.prototype.clones=function(e){var i=this._clones.length/2,s=i+this._items.length,o=function(t){return t%2==0?s+t/2:i-(t+1)/2};return void 0===e?t.map(this._clones,function(t,e){return o(e)}):t.map(this._clones,function(t,i){return t===e?o(i):null})},o.prototype.speed=function(t){return void 0!==t&&(this._speed=t),this._speed},o.prototype.coordinates=function(e){var i,s=1,o=e-1;return void 0===e?t.map(this._coordinates,t.proxy(function(t,e){return this.coordinates(e)},this)):(this.settings.center?(this.settings.rtl&&(s=-1,o=e+1),i=this._coordinates[e],i+=(this.width()-i+(this._coordinates[o]||0))/2*s):i=this._coordinates[o]||0,i=Math.ceil(i))},o.prototype.duration=function(t,e,i){return 0===i?0:Math.min(Math.max(Math.abs(e-t),1),6)*Math.abs(i||this.settings.smartSpeed)},o.prototype.to=function(t,e){var i=this.current(),s=null,o=t-this.relative(i),n=(o>0)-(o<0),r=this._items.length,a=this.minimum(),h=this.maximum();this.settings.loop?(!this.settings.rewind&&Math.abs(o)>r/2&&(o+=-1*n*r),t=i+o,(s=((t-a)%r+r)%r+a)!==t&&s-o<=h&&s-o>0&&(i=s-o,t=s,this.reset(i))):this.settings.rewind?(h+=1,t=(t%h+h)%h):t=Math.max(a,Math.min(h,t)),this.speed(this.duration(i,t,e)),this.current(t),this.$element.is(":visible")&&this.update()},o.prototype.next=function(t){t=t||!1,this.to(this.relative(this.current())+1,t)},o.prototype.prev=function(t){t=t||!1,this.to(this.relative(this.current())-1,t)},o.prototype.onTransitionEnd=function(t){if(void 0!==t&&(t.stopPropagation(),(t.target||t.srcElement||t.originalTarget)!==this.$stage.get(0)))return!1;this.leave("animating"),this.trigger("translated")},o.prototype.viewport=function(){var s;return this.options.responsiveBaseElement!==e?s=t(this.options.responsiveBaseElement).width():e.innerWidth?s=e.innerWidth:i.documentElement&&i.documentElement.clientWidth?s=i.documentElement.clientWidth:console.warn("Can not detect viewport width."),s},o.prototype.replace=function(e){this.$stage.empty(),this._items=[],e&&(e=e instanceof jQuery?e:t(e)),this.settings.nestedItemSelector&&(e=e.find("."+this.settings.nestedItemSelector)),e.filter(function(){return 1===this.nodeType}).each(t.proxy(function(t,e){e=this.prepare(e),this.$stage.append(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)},this)),this.reset(this.isNumeric(this.settings.startPosition)?this.settings.startPosition:0),this.invalidate("items")},o.prototype.add=function(e,i){var s=this.relative(this._current);i=void 0===i?this._items.length:this.normalize(i,!0),e=e instanceof jQuery?e:t(e),this.trigger("add",{content:e,position:i}),e=this.prepare(e),0===this._items.length||i===this._items.length?(0===this._items.length&&this.$stage.append(e),0!==this._items.length&&this._items[i-1].after(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)):(this._items[i].before(e),this._items.splice(i,0,e),this._mergers.splice(i,0,1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)),this._items[s]&&this.reset(this._items[s].index()),this.invalidate("items"),this.trigger("added",{content:e,position:i})},o.prototype.remove=function(t){void 0!==(t=this.normalize(t,!0))&&(this.trigger("remove",{content:this._items[t],position:t}),this._items[t].remove(),this._items.splice(t,1),this._mergers.splice(t,1),this.invalidate("items"),this.trigger("removed",{content:null,position:t}))},o.prototype.preloadAutoWidthImages=function(e){e.each(t.proxy(function(e,i){this.enter("pre-loading"),i=t(i),t(new Image).one("load",t.proxy(function(t){i.attr("src",t.target.src),i.css("opacity",1),this.leave("pre-loading"),!this.is("pre-loading")&&!this.is("initializing")&&this.refresh()},this)).attr("src",i.attr("src")||i.attr("data-src")||i.attr("data-src-retina"))},this))},o.prototype.destroy=function(){this.$element.off(".owl.core"),this.$stage.off(".owl.core"),t(i).off(".owl.core"),!1!==this.settings.responsive&&(e.clearTimeout(this.resizeTimer),this.off(e,"resize",this._handlers.onThrottledResize));for(var s in this._plugins)this._plugins[s].destroy();this.$stage.children(".cloned").remove(),this.$stage.unwrap(),this.$stage.children().contents().unwrap(),this.$stage.children().unwrap(),this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class",this.$element.attr("class").replace(new RegExp(this.options.responsiveClass+"-\\S+\\s","g"),"")).removeData("owl.carousel")},o.prototype.op=function(t,e,i){var s=this.settings.rtl;switch(e){case"<":return s?t>i:t<i;case">":return s?t<i:t>i;case">=":return s?t<=i:t>=i;case"<=":return s?t>=i:t<=i}},o.prototype.on=function(t,e,i,s){t.addEventListener?t.addEventListener(e,i,s):t.attachEvent&&t.attachEvent("on"+e,i)},o.prototype.off=function(t,e,i,s){t.removeEventListener?t.removeEventListener(e,i,s):t.detachEvent&&t.detachEvent("on"+e,i)},o.prototype.trigger=function(e,i,s,n,r){var a={item:{count:this._items.length,index:this.current()}},h=t.camelCase(t.grep(["on",e,s],function(t){return t}).join("-").toLowerCase()),c=t.Event([e,"owl",s||"carousel"].join(".").toLowerCase(),t.extend({relatedTarget:this},a,i));return this._supress[e]||(t.each(this._plugins,function(t,e){e.onTrigger&&e.onTrigger(c)}),this.register({type:o.Type.Event,name:e}),this.$element.trigger(c),this.settings&&"function"==typeof this.settings[h]&&this.settings[h].call(this,c)),c},o.prototype.enter=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){void 0===this._states.current[e]&&(this._states.current[e]=0),this._states.current[e]++},this))},o.prototype.leave=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]--},this))},o.prototype.register=function(e){if(e.type===o.Type.Event){if(t.event.special[e.name]||(t.event.special[e.name]={}),!t.event.special[e.name].owl){var i=t.event.special[e.name]._default;t.event.special[e.name]._default=function(t){return!i||!i.apply||t.namespace&&-1!==t.namespace.indexOf("owl")?t.namespace&&t.namespace.indexOf("owl")>-1:i.apply(this,arguments)},t.event.special[e.name].owl=!0}}else e.type===o.Type.State&&(this._states.tags[e.name]?this._states.tags[e.name]=this._states.tags[e.name].concat(e.tags):this._states.tags[e.name]=e.tags,this._states.tags[e.name]=t.grep(this._states.tags[e.name],t.proxy(function(i,s){return t.inArray(i,this._states.tags[e.name])===s},this)))},o.prototype.suppress=function(e){t.each(e,t.proxy(function(t,e){this._supress[e]=!0},this))},o.prototype.release=function(e){t.each(e,t.proxy(function(t,e){delete this._supress[e]},this))},o.prototype.pointer=function(t){var i={x:null,y:null};return t=t.originalEvent||t||e.event,t=t.touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t,t.pageX?(i.x=t.pageX,i.y=t.pageY):(i.x=t.clientX,i.y=t.clientY),i},o.prototype.isNumeric=function(t){return!isNaN(parseFloat(t))},o.prototype.difference=function(t,e){return{x:t.x-e.x,y:t.y-e.y}},t.fn.owlCarousel=function(e){var i=Array.prototype.slice.call(arguments,1);return this.each(function(){var s=t(this),n=s.data("owl.carousel");n||(n=new o(this,"object"==typeof e&&e),s.data("owl.carousel",n),t.each(["next","prev","to","destroy","refresh","replace","add","remove"],function(e,i){n.register({type:o.Type.Event,name:i}),n.$element.on(i+".owl.carousel.core",t.proxy(function(t){t.namespace&&t.relatedTarget!==this&&(this.suppress([i]),n[i].apply(this,[].slice.call(arguments,1)),this.release([i]))},n))})),"string"==typeof e&&"_"!==e.charAt(0)&&n[e].apply(n,i)})},t.fn.owlCarousel.Constructor=o}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var o=function(e){this._core=e,this._interval=null,this._visible=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoRefresh&&this.watch()},this)},this._core.options=t.extend({},o.Defaults,this._core.options),this._core.$element.on(this._handlers)};o.Defaults={autoRefresh:!0,autoRefreshInterval:500},o.prototype.watch=function(){this._interval||(this._visible=this._core.$element.is(":visible"),this._interval=e.setInterval(t.proxy(this.refresh,this),this._core.settings.autoRefreshInterval))},o.prototype.refresh=function(){this._core.$element.is(":visible")!==this._visible&&(this._visible=!this._visible,this._core.$element.toggleClass("owl-hidden",!this._visible),this._visible&&this._core.invalidate("width")&&this._core.refresh())},o.prototype.destroy=function(){var t,i;e.clearInterval(this._interval);for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoRefresh=o}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var o=function(e){this._core=e,this._loaded=[],this._handlers={"initialized.owl.carousel change.owl.carousel resized.owl.carousel":t.proxy(function(e){if(e.namespace&&this._core.settings&&this._core.settings.lazyLoad&&(e.property&&"position"==e.property.name||"initialized"==e.type))for(var i=this._core.settings,s=i.center&&Math.ceil(i.items/2)||i.items,o=i.center&&-1*s||0,n=(e.property&&void 0!==e.property.value?e.property.value:this._core.current())+o,r=this._core.clones().length,a=t.proxy(function(t,e){this.load(e)},this);o++<s;)this.load(r/2+this._core.relative(n)),r&&t.each(this._core.clones(this._core.relative(n)),a),n++},this)},this._core.options=t.extend({},o.Defaults,this._core.options),this._core.$element.on(this._handlers)};o.Defaults={lazyLoad:!1},o.prototype.load=function(i){var s=this._core.$stage.children().eq(i),o=s&&s.find(".owl-lazy");!o||t.inArray(s.get(0),this._loaded)>-1||(o.each(t.proxy(function(i,s){var o,n=t(s),r=e.devicePixelRatio>1&&n.attr("data-src-retina")||n.attr("data-src");this._core.trigger("load",{element:n,url:r},"lazy"),n.is("img")?n.one("load.owl.lazy",t.proxy(function(){n.css("opacity",1),this._core.trigger("loaded",{element:n,url:r},"lazy")},this)).attr("src",r):(o=new Image,o.onload=t.proxy(function(){n.css({"background-image":'url("'+r+'")',opacity:"1"}),this._core.trigger("loaded",{element:n,url:r},"lazy")},this),o.src=r)},this)),this._loaded.push(s.get(0)))},o.prototype.destroy=function(){var t,e;for(t in this.handlers)this._core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Lazy=o}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var o=function(e){this._core=e,this._handlers={"initialized.owl.carousel refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&this.update()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&"position"==t.property.name&&this.update()},this),"loaded.owl.lazy":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&t.element.closest("."+this._core.settings.itemClass).index()===this._core.current()&&this.update()},this)},this._core.options=t.extend({},o.Defaults,this._core.options),this._core.$element.on(this._handlers)};o.Defaults={autoHeight:!1,autoHeightClass:"owl-height"},o.prototype.update=function(){var e=this._core._current,i=e+this._core.settings.items,s=this._core.$stage.children().toArray().slice(e,i),o=[],n=0;t.each(s,function(e,i){o.push(t(i).height())}),n=Math.max.apply(null,o),this._core.$stage.parent().height(n).addClass(this._core.settings.autoHeightClass)},o.prototype.destroy=function(){var t,e;for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoHeight=o}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var o=function(e){this._core=e,this._videos={},this._playing=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.register({type:"state",name:"playing",tags:["interacting"]})},this),"resize.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.video&&this.isInFullScreen()&&t.preventDefault()},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.is("resizing")&&this._core.$stage.find(".cloned .owl-video-frame").remove()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"===t.property.name&&this._playing&&this.stop()},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var i=t(e.content).find(".owl-video");i.length&&(i.css("display","none"),this.fetch(i,t(e.content)))}},this)},this._core.options=t.extend({},o.Defaults,this._core.options),this._core.$element.on(this._handlers),this._core.$element.on("click.owl.video",".owl-video-play-icon",t.proxy(function(t){this.play(t)},this))};o.Defaults={video:!1,videoHeight:!1,videoWidth:!1},o.prototype.fetch=function(t,e){var i=function(){return t.attr("data-vimeo-id")?"vimeo":t.attr("data-vzaar-id")?"vzaar":"youtube"}(),s=t.attr("data-vimeo-id")||t.attr("data-youtube-id")||t.attr("data-vzaar-id"),o=t.attr("data-width")||this._core.settings.videoWidth,n=t.attr("data-height")||this._core.settings.videoHeight,r=t.attr("href");if(!r)throw new Error("Missing video URL.");if(s=r.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/),s[3].indexOf("youtu")>-1)i="youtube";else if(s[3].indexOf("vimeo")>-1)i="vimeo";else{if(!(s[3].indexOf("vzaar")>-1))throw new Error("Video URL not supported.");i="vzaar"}s=s[6],this._videos[r]={type:i,id:s,width:o,height:n},e.attr("data-video",r),this.thumbnail(t,this._videos[r])},o.prototype.thumbnail=function(e,i){var s,o,n,r=i.width&&i.height?'style="width:'+i.width+"px;height:"+i.height+'px;"':"",a=e.find("img"),h="src",c="",l=this._core.settings,d=function(t){o='<div class="owl-video-play-icon"></div>',s=l.lazyLoad?'<div class="owl-video-tn '+c+'" '+h+'="'+t+'"></div>':'<div class="owl-video-tn" style="opacity:1;background-image:url('+t+')"></div>',e.after(s),e.after(o)};if(e.wrap('<div class="owl-video-wrapper"'+r+"></div>"),this._core.settings.lazyLoad&&(h="data-src",c="owl-lazy"),a.length)return d(a.attr(h)),a.remove(),!1;"youtube"===i.type?(n="//img.youtube.com/vi/"+i.id+"/hqdefault.jpg",d(n)):"vimeo"===i.type?t.ajax({type:"GET",url:"//vimeo.com/api/v2/video/"+i.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){n=t[0].thumbnail_large,d(n)}}):"vzaar"===i.type&&t.ajax({type:"GET",url:"//vzaar.com/api/videos/"+i.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){n=t.framegrab_url,d(n)}})},o.prototype.stop=function(){this._core.trigger("stop",null,"video"),this._playing.find(".owl-video-frame").remove(),this._playing.removeClass("owl-video-playing"),this._playing=null,this._core.leave("playing"),this._core.trigger("stopped",null,"video")},o.prototype.play=function(e){var i,s=t(e.target),o=s.closest("."+this._core.settings.itemClass),n=this._videos[o.attr("data-video")],r=n.width||"100%",a=n.height||this._core.$stage.height();this._playing||(this._core.enter("playing"),this._core.trigger("play",null,"video"),o=this._core.items(this._core.relative(o.index())),this._core.reset(o.index()),"youtube"===n.type?i='<iframe width="'+r+'" height="'+a+'" src="//www.youtube.com/embed/'+n.id+"?autoplay=1&rel=0&v="+n.id+'" frameborder="0" allowfullscreen></iframe>':"vimeo"===n.type?i='<iframe src="//player.vimeo.com/video/'+n.id+'?autoplay=1" width="'+r+'" height="'+a+'" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>':"vzaar"===n.type&&(i='<iframe frameborder="0"height="'+a+'"width="'+r+'" allowfullscreen mozallowfullscreen webkitAllowFullScreen src="//view.vzaar.com/'+n.id+'/player?autoplay=true"></iframe>'),t('<div class="owl-video-frame">'+i+"</div>").insertAfter(o.find(".owl-video")),this._playing=o.addClass("owl-video-playing"))},o.prototype.isInFullScreen=function(){var e=i.fullscreenElement||i.mozFullScreenElement||i.webkitFullscreenElement;return e&&t(e).parent().hasClass("owl-video-frame")},o.prototype.destroy=function(){var t,e;this._core.$element.off("click.owl.video");for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Video=o}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var o=function(e){this.core=e,this.core.options=t.extend({},o.Defaults,this.core.options),this.swapping=!0,this.previous=void 0,this.next=void 0,this.handlers={"change.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&(this.previous=this.core.current(),this.next=t.property.value)},this),"drag.owl.carousel dragged.owl.carousel translated.owl.carousel":t.proxy(function(t){t.namespace&&(this.swapping="translated"==t.type)},this),"translate.owl.carousel":t.proxy(function(t){t.namespace&&this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)&&this.swap()},this)},this.core.$element.on(this.handlers)};o.Defaults={animateOut:!1,animateIn:!1},o.prototype.swap=function(){if(1===this.core.settings.items&&t.support.animation&&t.support.transition){this.core.speed(0);var e,i=t.proxy(this.clear,this),s=this.core.$stage.children().eq(this.previous),o=this.core.$stage.children().eq(this.next),n=this.core.settings.animateIn,r=this.core.settings.animateOut;this.core.current()!==this.previous&&(r&&(e=this.core.coordinates(this.previous)-this.core.coordinates(this.next),s.one(t.support.animation.end,i).css({left:e+"px"}).addClass("animated owl-animated-out").addClass(r)),n&&o.one(t.support.animation.end,i).addClass("animated owl-animated-in").addClass(n))}},o.prototype.clear=function(e){t(e.target).css({left:""}).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut),this.core.onTransitionEnd()},o.prototype.destroy=function(){var t,e;for(t in this.handlers)this.core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Animate=o}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var o=function(e){this._core=e,this._timeout=null,this._paused=!1,this._handlers={"changed.owl.carousel":t.proxy(function(t){t.namespace&&"settings"===t.property.name?this._core.settings.autoplay?this.play():this.stop():t.namespace&&"position"===t.property.name&&this._core.settings.autoplay&&this._setAutoPlayInterval()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoplay&&this.play()},this),"play.owl.autoplay":t.proxy(function(t,e,i){t.namespace&&this.play(e,i)},this),"stop.owl.autoplay":t.proxy(function(t){t.namespace&&this.stop()},this),"mouseover.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"mouseleave.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.play()},this),"touchstart.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"touchend.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this.play()},this)},this._core.$element.on(this._handlers),this._core.options=t.extend({},o.Defaults,this._core.options)};o.Defaults={autoplay:!1,autoplayTimeout:5e3,autoplayHoverPause:!1,autoplaySpeed:!1},o.prototype.play=function(t,e){this._paused=!1,this._core.is("rotating")||(this._core.enter("rotating"),this._setAutoPlayInterval())},o.prototype._getNextTimeout=function(s,o){return this._timeout&&e.clearTimeout(this._timeout),e.setTimeout(t.proxy(function(){this._paused||this._core.is("busy")||this._core.is("interacting")||i.hidden||this._core.next(o||this._core.settings.autoplaySpeed)},this),s||this._core.settings.autoplayTimeout)},o.prototype._setAutoPlayInterval=function(){this._timeout=this._getNextTimeout()},o.prototype.stop=function(){this._core.is("rotating")&&(e.clearTimeout(this._timeout),this._core.leave("rotating"))},o.prototype.pause=function(){this._core.is("rotating")&&(this._paused=!0)},o.prototype.destroy=function(){var t,e;this.stop();for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.autoplay=o}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){"use strict";var o=function(e){this._core=e,this._initialized=!1,this._pages=[],this._controls={},this._templates=[],this.$element=this._core.$element,this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to},this._handlers={"prepared.owl.carousel":t.proxy(function(e){e.namespace&&this._core.settings.dotsData&&this._templates.push('<div class="'+this._core.settings.dotClass+'">'+t(e.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot")+"</div>")},this),"added.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,0,this._templates.pop())},this),"remove.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,1)},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&this.draw()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&!this._initialized&&(this._core.trigger("initialize",null,"navigation"),this.initialize(),this.update(),this.draw(),this._initialized=!0,this._core.trigger("initialized",null,"navigation"))},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._initialized&&(this._core.trigger("refresh",null,"navigation"),this.update(),this.draw(),this._core.trigger("refreshed",null,"navigation"))},this)},this._core.options=t.extend({},o.Defaults,this._core.options),this.$element.on(this._handlers)};o.Defaults={nav:!1,navText:["prev","next"],navSpeed:!1,navElement:"div",navContainer:!1,navContainerClass:"owl-nav",navClass:["owl-prev","owl-next"],slideBy:1,dotClass:"owl-dot",dotsClass:"owl-dots",dots:!0,dotsEach:!1,dotsData:!1,dotsSpeed:!1,dotsContainer:!1},o.prototype.initialize=function(){var e,i=this._core.settings;this._controls.$relative=(i.navContainer?t(i.navContainer):t("<div>").addClass(i.navContainerClass).appendTo(this.$element)).addClass("disabled"),this._controls.$previous=t("<"+i.navElement+">").addClass(i.navClass[0]).html(i.navText[0]).prependTo(this._controls.$relative).on("click",t.proxy(function(t){this.prev(i.navSpeed)},this)),this._controls.$next=t("<"+i.navElement+">").addClass(i.navClass[1]).html(i.navText[1]).appendTo(this._controls.$relative).on("click",t.proxy(function(t){this.next(i.navSpeed)},this)),i.dotsData||(this._templates=[t("<div>").addClass(i.dotClass).append(t("<span>")).prop("outerHTML")]),this._controls.$absolute=(i.dotsContainer?t(i.dotsContainer):t("<div>").addClass(i.dotsClass).appendTo(this.$element)).addClass("disabled"),this._controls.$absolute.on("click","div",t.proxy(function(e){var s=t(e.target).parent().is(this._controls.$absolute)?t(e.target).index():t(e.target).parent().index();e.preventDefault(),this.to(s,i.dotsSpeed)},this));for(e in this._overrides)this._core[e]=t.proxy(this[e],this)},o.prototype.destroy=function(){var t,e,i,s;for(t in this._handlers)this.$element.off(t,this._handlers[t]);for(e in this._controls)this._controls[e].remove();for(s in this.overides)this._core[s]=this._overrides[s]
;for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},o.prototype.update=function(){var t,e,i,s=this._core.clones().length/2,o=s+this._core.items().length,n=this._core.maximum(!0),r=this._core.settings,a=r.center||r.autoWidth||r.dotsData?1:r.dotsEach||r.items;if("page"!==r.slideBy&&(r.slideBy=Math.min(r.slideBy,r.items)),r.dots||"page"==r.slideBy)for(this._pages=[],t=s,e=0,i=0;t<o;t++){if(e>=a||0===e){if(this._pages.push({start:Math.min(n,t-s),end:t-s+a-1}),Math.min(n,t-s)===n)break;e=0,++i}e+=this._core.mergers(this._core.relative(t))}},o.prototype.draw=function(){var e,i=this._core.settings,s=this._core.items().length<=i.items,o=this._core.relative(this._core.current()),n=i.loop||i.rewind;this._controls.$relative.toggleClass("disabled",!i.nav||s),i.nav&&(this._controls.$previous.toggleClass("disabled",!n&&o<=this._core.minimum(!0)),this._controls.$next.toggleClass("disabled",!n&&o>=this._core.maximum(!0))),this._controls.$absolute.toggleClass("disabled",!i.dots||s),i.dots&&(e=this._pages.length-this._controls.$absolute.children().length,i.dotsData&&0!==e?this._controls.$absolute.html(this._templates.join("")):e>0?this._controls.$absolute.append(new Array(e+1).join(this._templates[0])):e<0&&this._controls.$absolute.children().slice(e).remove(),this._controls.$absolute.find(".active").removeClass("active"),this._controls.$absolute.children().eq(t.inArray(this.current(),this._pages)).addClass("active"))},o.prototype.onTrigger=function(e){var i=this._core.settings;e.page={index:t.inArray(this.current(),this._pages),count:this._pages.length,size:i&&(i.center||i.autoWidth||i.dotsData?1:i.dotsEach||i.items)}},o.prototype.current=function(){var e=this._core.relative(this._core.current());return t.grep(this._pages,t.proxy(function(t,i){return t.start<=e&&t.end>=e},this)).pop()},o.prototype.getPosition=function(e){var i,s,o=this._core.settings;return"page"==o.slideBy?(i=t.inArray(this.current(),this._pages),s=this._pages.length,e?++i:--i,i=this._pages[(i%s+s)%s].start):(i=this._core.relative(this._core.current()),s=this._core.items().length,e?i+=o.slideBy:i-=o.slideBy),i},o.prototype.next=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!0),e)},o.prototype.prev=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!1),e)},o.prototype.to=function(e,i,s){var o;!s&&this._pages.length?(o=this._pages.length,t.proxy(this._overrides.to,this._core)(this._pages[(e%o+o)%o].start,i)):t.proxy(this._overrides.to,this._core)(e,i)},t.fn.owlCarousel.Constructor.Plugins.Navigation=o}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){"use strict";var o=function(i){this._core=i,this._hashes={},this.$element=this._core.$element,this._handlers={"initialized.owl.carousel":t.proxy(function(i){i.namespace&&"URLHash"===this._core.settings.startPosition&&t(e).trigger("hashchange.owl.navigation")},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var i=t(e.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if(!i)return;this._hashes[i]=e.content}},this),"changed.owl.carousel":t.proxy(function(i){if(i.namespace&&"position"===i.property.name){var s=this._core.items(this._core.relative(this._core.current())),o=t.map(this._hashes,function(t,e){return t===s?e:null}).join();if(!o||e.location.hash.slice(1)===o)return;e.location.hash=o}},this)},this._core.options=t.extend({},o.Defaults,this._core.options),this.$element.on(this._handlers),t(e).on("hashchange.owl.navigation",t.proxy(function(t){var i=e.location.hash.substring(1),s=this._core.$stage.children(),o=this._hashes[i]&&s.index(this._hashes[i]);void 0!==o&&o!==this._core.current()&&this._core.to(this._core.relative(o),!1,!0)},this))};o.Defaults={URLhashListener:!1},o.prototype.destroy=function(){var i,s;t(e).off("hashchange.owl.navigation");for(i in this._handlers)this._core.$element.off(i,this._handlers[i]);for(s in Object.getOwnPropertyNames(this))"function"!=typeof this[s]&&(this[s]=null)},t.fn.owlCarousel.Constructor.Plugins.Hash=o}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){function o(e,i){var o=!1,n=e.charAt(0).toUpperCase()+e.slice(1);return t.each((e+" "+a.join(n+" ")+n).split(" "),function(t,e){if(r[e]!==s)return o=!i||e,!1}),o}function n(t){return o(t,!0)}var r=t("<support>").get(0).style,a="Webkit Moz O ms".split(" "),h={transition:{end:{WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"}},animation:{end:{WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd",animation:"animationend"}}},c={csstransforms:function(){return!!o("transform")},csstransforms3d:function(){return!!o("perspective")},csstransitions:function(){return!!o("transition")},cssanimations:function(){return!!o("animation")}};c.csstransitions()&&(t.support.transition=new String(n("transition")),t.support.transition.end=h.transition.end[t.support.transition]),c.cssanimations()&&(t.support.animation=new String(n("animation")),t.support.animation.end=h.animation.end[t.support.animation]),c.csstransforms()&&(t.support.transform=new String(n("transform")),t.support.transform3d=c.csstransforms3d())}(window.Zepto||window.jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
